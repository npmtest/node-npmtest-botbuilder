{"/home/travis/build/npmtest/node-npmtest-botbuilder/test.js":"/* istanbul instrument in package npmtest_botbuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-botbuilder/lib.npmtest_botbuilder.js":"/* istanbul instrument in package npmtest_botbuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_botbuilder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_botbuilder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-botbuilder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-botbuilder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_botbuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_botbuilder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_botbuilder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_botbuilder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_botbuilder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_botbuilder.__dirname + '/lib.npmtest_botbuilder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/botbuilder.js":"\"use strict\";\r\nvar Session = require(\"./Session\");\r\nvar Message = require(\"./Message\");\r\nvar Dialog = require(\"./dialogs/Dialog\");\r\nvar DialogAction = require(\"./dialogs/DialogAction\");\r\nvar Prompts = require(\"./dialogs/Prompts\");\r\nvar SimpleDialog = require(\"./dialogs/SimpleDialog\");\r\nvar EntityRecognizer = require(\"./dialogs/EntityRecognizer\");\r\nvar Library = require(\"./bots/Library\");\r\nvar UniversalBot = require(\"./bots/UniversalBot\");\r\nvar ChatConnector = require(\"./bots/ChatConnector\");\r\nvar ConsoleConnector = require(\"./bots/ConsoleConnector\");\r\nvar BotStorage = require(\"./storage/BotStorage\");\r\nvar CardAction = require(\"./cards/CardAction\");\r\nvar HeroCard = require(\"./cards/HeroCard\");\r\nvar CardImage = require(\"./cards/CardImage\");\r\nvar ReceiptCard = require(\"./cards/ReceiptCard\");\r\nvar SigninCard = require(\"./cards/SigninCard\");\r\nvar ThumbnailCard = require(\"./cards/ThumbnailCard\");\r\nvar VideoCard = require(\"./cards/VideoCard\");\r\nvar AudioCard = require(\"./cards/AudioCard\");\r\nvar AnimationCard = require(\"./cards/AnimationCard\");\r\nvar MediaCard = require(\"./cards/MediaCard\");\r\nvar CardMedia = require(\"./cards/CardMedia\");\r\nvar Keyboard = require(\"./cards/Keyboard\");\r\nvar Middleware = require(\"./middleware/Middleware\");\r\nvar IntentRecognizerSet = require(\"./dialogs/IntentRecognizerSet\");\r\nvar RegExpRecognizer = require(\"./dialogs/RegExpRecognizer\");\r\nvar LuisRecognizer = require(\"./dialogs/LuisRecognizer\");\r\nvar IntentDialog = require(\"./dialogs/IntentDialog\");\r\nexports.Session = Session.Session;\r\nexports.Message = Message.Message;\r\nexports.AttachmentLayout = Message.AttachmentLayout;\r\nexports.TextFormat = Message.TextFormat;\r\nexports.CardAction = CardAction.CardAction;\r\nexports.HeroCard = HeroCard.HeroCard;\r\nexports.VideoCard = VideoCard.VideoCard;\r\nexports.AudioCard = AudioCard.AudioCard;\r\nexports.AnimationCard = AnimationCard.AnimationCard;\r\nexports.MediaCard = MediaCard.MediaCard;\r\nexports.CardMedia = CardMedia.CardMedia;\r\nexports.CardImage = CardImage.CardImage;\r\nexports.ReceiptCard = ReceiptCard.ReceiptCard;\r\nexports.ReceiptItem = ReceiptCard.ReceiptItem;\r\nexports.Fact = ReceiptCard.Fact;\r\nexports.SigninCard = SigninCard.SigninCard;\r\nexports.ThumbnailCard = ThumbnailCard.ThumbnailCard;\r\nexports.Keyboard = Keyboard.Keyboard;\r\nexports.Dialog = Dialog.Dialog;\r\nexports.ResumeReason = Dialog.ResumeReason;\r\nexports.DialogAction = DialogAction.DialogAction;\r\nexports.PromptType = Prompts.PromptType;\r\nexports.ListStyle = Prompts.ListStyle;\r\nexports.Prompts = Prompts.Prompts;\r\nexports.SimplePromptRecognizer = Prompts.SimplePromptRecognizer;\r\nexports.RecognizeOrder = IntentRecognizerSet.RecognizeOrder;\r\nexports.IntentRecognizerSet = IntentRecognizerSet.IntentRecognizerSet;\r\nexports.IntentDialog = IntentDialog.IntentDialog;\r\nexports.RecognizeMode = IntentDialog.RecognizeMode;\r\nexports.LuisRecognizer = LuisRecognizer.LuisRecognizer;\r\nexports.RegExpRecognizer = RegExpRecognizer.RegExpRecognizer;\r\nexports.SimpleDialog = SimpleDialog.SimpleDialog;\r\nexports.EntityRecognizer = EntityRecognizer.EntityRecognizer;\r\nexports.Library = Library.Library;\r\nexports.UniversalBot = UniversalBot.UniversalBot;\r\nexports.ChatConnector = ChatConnector.ChatConnector;\r\nexports.ConsoleConnector = ConsoleConnector.ConsoleConnector;\r\nexports.MemoryBotStorage = BotStorage.MemoryBotStorage;\r\nexports.Middleware = Middleware.Middleware;\r\nvar deprecatedBCB = require(\"./deprecated/BotConnectorBot\");\r\nvar deprecatedLD = require(\"./deprecated/LuisDialog\");\r\nvar deprecatedCD = require(\"./deprecated/CommandDialog\");\r\nvar deprecatedTB = require(\"./deprecated/TextBot\");\r\nexports.BotConnectorBot = deprecatedBCB.BotConnectorBot;\r\nexports.LuisDialog = deprecatedLD.LuisDialog;\r\nexports.CommandDialog = deprecatedCD.CommandDialog;\r\nexports.TextBot = deprecatedTB.TextBot;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/Session.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Dialog_1 = require(\"./dialogs/Dialog\");\r\nvar Message_1 = require(\"./Message\");\r\nvar consts = require(\"./consts\");\r\nvar logger = require(\"./logger\");\r\nvar sprintf = require(\"sprintf-js\");\r\nvar events = require(\"events\");\r\nvar Session = (function (_super) {\r\n    __extends(Session, _super);\r\n    function Session(options) {\r\n        var _this = _super.call(this) || this;\r\n        _this.options = options;\r\n        _this.msgSent = false;\r\n        _this._isReset = false;\r\n        _this.lastSendTime = new Date().getTime();\r\n        _this.batch = [];\r\n        _this.batchStarted = false;\r\n        _this.sendingBatch = false;\r\n        _this.inMiddleware = false;\r\n        _this._locale = null;\r\n        _this.localizer = null;\r\n        _this.library = options.library;\r\n        _this.localizer = options.localizer;\r\n        if (typeof _this.options.autoBatchDelay !== 'number') {\r\n            _this.options.autoBatchDelay = 250;\r\n        }\r\n        return _this;\r\n    }\r\n    Session.prototype.toRecognizeContext = function () {\r\n        var _this = this;\r\n        return {\r\n            message: this.message,\r\n            userData: this.userData,\r\n            conversationData: this.conversationData,\r\n            privateConversationData: this.privateConversationData,\r\n            localizer: this.localizer,\r\n            dialogStack: function () { return _this.dialogStack(); },\r\n            preferredLocale: function () { return _this.preferredLocale(); },\r\n            gettext: function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                return Session.prototype.gettext.call(_this, args);\r\n            },\r\n            ngettext: function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                return Session.prototype.ngettext.call(_this, args);\r\n            },\r\n            locale: this.preferredLocale()\r\n        };\r\n    };\r\n    Session.prototype.dispatch = function (sessionState, message, done) {\r\n        var _this = this;\r\n        var index = 0;\r\n        var session = this;\r\n        var now = new Date().getTime();\r\n        var middleware = this.options.middleware || [];\r\n        var next = function () {\r\n            var handler = index < middleware.length ? middleware[index] : null;\r\n            if (handler) {\r\n                index++;\r\n                handler(session, next);\r\n            }\r\n            else {\r\n                _this.inMiddleware = false;\r\n                _this.sessionState.lastAccess = now;\r\n                done();\r\n            }\r\n        };\r\n        this.sessionState = sessionState || { callstack: [], lastAccess: now, version: 0.0 };\r\n        var cur = this.curDialog();\r\n        if (cur) {\r\n            this.dialogData = cur.state;\r\n        }\r\n        this.inMiddleware = true;\r\n        this.message = (message || { text: '' });\r\n        if (!this.message.type) {\r\n            this.message.type = consts.messageType;\r\n        }\r\n        var locale = this.preferredLocale();\r\n        this.localizer.load(locale, function (err) {\r\n            if (err) {\r\n                _this.error(err);\r\n            }\r\n            else {\r\n                next();\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    Session.prototype.error = function (err) {\r\n        logger.info(this, 'session.error()');\r\n        if (this.options.dialogErrorMessage) {\r\n            this.endConversation(this.options.dialogErrorMessage);\r\n        }\r\n        else {\r\n            var locale = this.preferredLocale();\r\n            this.endConversation(this.localizer.gettext(locale, 'default_error', consts.Library.system));\r\n        }\r\n        var m = err.toString();\r\n        err = err instanceof Error ? err : new Error(m);\r\n        this.emit('error', err);\r\n        return this;\r\n    };\r\n    Session.prototype.preferredLocale = function (locale, callback) {\r\n        if (locale) {\r\n            this._locale = locale;\r\n            if (this.userData) {\r\n                this.userData[consts.Data.PreferredLocale] = locale;\r\n            }\r\n            if (this.localizer) {\r\n                this.localizer.load(locale, callback);\r\n            }\r\n        }\r\n        else if (!this._locale) {\r\n            if (this.userData && this.userData[consts.Data.PreferredLocale]) {\r\n                this._locale = this.userData[consts.Data.PreferredLocale];\r\n            }\r\n            else if (this.message && this.message.textLocale) {\r\n                this._locale = this.message.textLocale;\r\n            }\r\n            else if (this.localizer) {\r\n                this._locale = this.localizer.defaultLocale();\r\n            }\r\n        }\r\n        return this._locale;\r\n    };\r\n    Session.prototype.gettext = function (messageid) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        return this.vgettext(this.curLibraryName(), messageid, args);\r\n    };\r\n    Session.prototype.ngettext = function (messageid, messageid_plural, count) {\r\n        var tmpl;\r\n        if (this.localizer && this.message) {\r\n            tmpl = this.localizer.ngettext(this.preferredLocale(), messageid, messageid_plural, count, this.curLibraryName());\r\n        }\r\n        else if (count == 1) {\r\n            tmpl = messageid;\r\n        }\r\n        else {\r\n            tmpl = messageid_plural;\r\n        }\r\n        return sprintf.sprintf(tmpl, count);\r\n    };\r\n    Session.prototype.save = function () {\r\n        logger.info(this, 'session.save()');\r\n        this.startBatch();\r\n        return this;\r\n    };\r\n    Session.prototype.send = function (message) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        args.unshift(this.curLibraryName(), message);\r\n        return Session.prototype.sendLocalized.apply(this, args);\r\n    };\r\n    Session.prototype.sendLocalized = function (localizationNamespace, message) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        this.msgSent = true;\r\n        if (message) {\r\n            var m;\r\n            if (typeof message == 'string' || Array.isArray(message)) {\r\n                m = this.createMessage(localizationNamespace, message, args);\r\n            }\r\n            else if (message.toMessage) {\r\n                m = message.toMessage();\r\n            }\r\n            else {\r\n                m = message;\r\n            }\r\n            this.prepareMessage(m);\r\n            this.batch.push(m);\r\n            logger.info(this, 'session.send()');\r\n        }\r\n        this.startBatch();\r\n        return this;\r\n    };\r\n    Session.prototype.sendTyping = function () {\r\n        this.msgSent = true;\r\n        var m = { type: 'typing' };\r\n        this.prepareMessage(m);\r\n        this.batch.push(m);\r\n        logger.info(this, 'session.sendTyping()');\r\n        this.sendBatch();\r\n        return this;\r\n    };\r\n    Session.prototype.messageSent = function () {\r\n        return this.msgSent;\r\n    };\r\n    Session.prototype.beginDialog = function (id, args) {\r\n        logger.info(this, 'session.beginDialog(%s)', id);\r\n        var id = this.resolveDialogId(id);\r\n        var dialog = this.findDialog(id);\r\n        if (!dialog) {\r\n            throw new Error('Dialog[' + id + '] not found.');\r\n        }\r\n        this.pushDialog({ id: id, state: {} });\r\n        this.startBatch();\r\n        dialog.begin(this, args);\r\n        return this;\r\n    };\r\n    Session.prototype.replaceDialog = function (id, args) {\r\n        logger.info(this, 'session.replaceDialog(%s)', id);\r\n        var id = this.resolveDialogId(id);\r\n        var dialog = this.findDialog(id);\r\n        if (!dialog) {\r\n            throw new Error('Dialog[' + id + '] not found.');\r\n        }\r\n        this.popDialog();\r\n        this.pushDialog({ id: id, state: {} });\r\n        this.startBatch();\r\n        dialog.begin(this, args);\r\n        return this;\r\n    };\r\n    Session.prototype.endConversation = function (message) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var m;\r\n        if (message) {\r\n            if (typeof message == 'string' || Array.isArray(message)) {\r\n                m = this.createMessage(this.curLibraryName(), message, args);\r\n            }\r\n            else if (message.toMessage) {\r\n                m = message.toMessage();\r\n            }\r\n            else {\r\n                m = message;\r\n            }\r\n            this.msgSent = true;\r\n            this.prepareMessage(m);\r\n            this.batch.push(m);\r\n        }\r\n        this.privateConversationData = {};\r\n        logger.info(this, 'session.endConversation()');\r\n        var ss = this.sessionState;\r\n        ss.callstack = [];\r\n        this.sendBatch();\r\n        return this;\r\n    };\r\n    Session.prototype.endDialog = function (message) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (typeof message === 'object' && (message.hasOwnProperty('response') || message.hasOwnProperty('resumed') || message.hasOwnProperty('error'))) {\r\n            console.warn('Returning results via Session.endDialog() is deprecated. Use Session.endDialogWithResult() instead.');\r\n            return this.endDialogWithResult(message);\r\n        }\r\n        var cur = this.curDialog();\r\n        if (cur) {\r\n            var m;\r\n            if (message) {\r\n                if (typeof message == 'string' || Array.isArray(message)) {\r\n                    m = this.createMessage(this.curLibraryName(), message, args);\r\n                }\r\n                else if (message.toMessage) {\r\n                    m = message.toMessage();\r\n                }\r\n                else {\r\n                    m = message;\r\n                }\r\n                this.msgSent = true;\r\n                this.prepareMessage(m);\r\n                this.batch.push(m);\r\n            }\r\n            logger.info(this, 'session.endDialog()');\r\n            var childId = cur.id;\r\n            cur = this.popDialog();\r\n            this.startBatch();\r\n            if (cur) {\r\n                var dialog = this.findDialog(cur.id);\r\n                if (dialog) {\r\n                    dialog.dialogResumed(this, { resumed: Dialog_1.ResumeReason.completed, response: true, childId: childId });\r\n                }\r\n                else {\r\n                    this.error(new Error(\"Can't resume missing parent dialog '\" + cur.id + \"'.\"));\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Session.prototype.endDialogWithResult = function (result) {\r\n        var cur = this.curDialog();\r\n        if (cur) {\r\n            result = result || {};\r\n            if (!result.hasOwnProperty('resumed')) {\r\n                result.resumed = Dialog_1.ResumeReason.completed;\r\n            }\r\n            result.childId = cur.id;\r\n            logger.info(this, 'session.endDialogWithResult()');\r\n            cur = this.popDialog();\r\n            this.startBatch();\r\n            if (cur) {\r\n                var dialog = this.findDialog(cur.id);\r\n                if (dialog) {\r\n                    dialog.dialogResumed(this, result);\r\n                }\r\n                else {\r\n                    this.error(new Error(\"Can't resume missing parent dialog '\" + cur.id + \"'.\"));\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Session.prototype.cancelDialog = function (dialogId, replaceWithId, replaceWithArgs) {\r\n        var childId = typeof dialogId === 'number' ? this.sessionState.callstack[dialogId].id : dialogId;\r\n        var cur = this.deleteDialogs(dialogId);\r\n        if (replaceWithId) {\r\n            logger.info(this, 'session.cancelDialog(%s)', replaceWithId);\r\n            var id = this.resolveDialogId(replaceWithId);\r\n            var dialog = this.findDialog(id);\r\n            this.pushDialog({ id: id, state: {} });\r\n            this.startBatch();\r\n            dialog.begin(this, replaceWithArgs);\r\n        }\r\n        else {\r\n            logger.info(this, 'session.cancelDialog()');\r\n            this.startBatch();\r\n            if (cur) {\r\n                var dialog = this.findDialog(cur.id);\r\n                if (dialog) {\r\n                    dialog.dialogResumed(this, { resumed: Dialog_1.ResumeReason.canceled, response: null, childId: childId });\r\n                }\r\n                else {\r\n                    this.error(new Error(\"Can't resume missing parent dialog '\" + cur.id + \"'.\"));\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Session.prototype.reset = function (dialogId, dialogArgs) {\r\n        logger.info(this, 'session.reset()');\r\n        this._isReset = true;\r\n        this.sessionState.callstack = [];\r\n        if (!dialogId) {\r\n            dialogId = this.options.dialogId;\r\n            dialogArgs = this.options.dialogArgs;\r\n        }\r\n        this.beginDialog(dialogId, dialogArgs);\r\n        return this;\r\n    };\r\n    Session.prototype.isReset = function () {\r\n        return this._isReset;\r\n    };\r\n    Session.prototype.sendBatch = function (callback) {\r\n        var _this = this;\r\n        logger.info(this, 'session.sendBatch() sending %d messages', this.batch.length);\r\n        if (this.sendingBatch) {\r\n            return;\r\n        }\r\n        if (this.batchTimer) {\r\n            clearTimeout(this.batchTimer);\r\n            this.batchTimer = null;\r\n        }\r\n        this.batchTimer = null;\r\n        var batch = this.batch;\r\n        this.batch = [];\r\n        this.batchStarted = false;\r\n        this.sendingBatch = true;\r\n        var cur = this.curDialog();\r\n        if (cur) {\r\n            cur.state = this.dialogData;\r\n        }\r\n        this.options.onSave(function (err) {\r\n            if (!err) {\r\n                if (batch.length) {\r\n                    _this.options.onSend(batch, function (err) {\r\n                        _this.sendingBatch = false;\r\n                        if (_this.batchStarted) {\r\n                            _this.startBatch();\r\n                        }\r\n                        if (callback) {\r\n                            callback(err);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    _this.sendingBatch = false;\r\n                    if (_this.batchStarted) {\r\n                        _this.startBatch();\r\n                    }\r\n                    if (callback) {\r\n                        callback(err);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                _this.sendingBatch = false;\r\n                switch (err.code || '') {\r\n                    case consts.Errors.EBADMSG:\r\n                    case consts.Errors.EMSGSIZE:\r\n                        _this.userData = {};\r\n                        _this.batch = [];\r\n                        _this.endConversation(_this.options.dialogErrorMessage || 'Oops. Something went wrong and we need to start over.');\r\n                        break;\r\n                }\r\n                if (callback) {\r\n                    callback(err);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Session.prototype.dialogStack = function (newStack) {\r\n        var stack;\r\n        if (newStack) {\r\n            stack = this.sessionState.callstack = newStack;\r\n            this.dialogData = stack.length > 0 ? stack[stack.length - 1].state : null;\r\n        }\r\n        else {\r\n            stack = this.sessionState.callstack || [];\r\n            if (stack.length > 0) {\r\n                stack[stack.length - 1].state = this.dialogData || {};\r\n            }\r\n        }\r\n        return stack.slice(0);\r\n    };\r\n    Session.prototype.clearDialogStack = function () {\r\n        this.sessionState.callstack = [];\r\n        this.dialogData = null;\r\n        return this;\r\n    };\r\n    Session.forEachDialogStackEntry = function (stack, reverse, fn) {\r\n        var step = reverse ? -1 : 1;\r\n        var l = stack ? stack.length : 0;\r\n        for (var i = step > 0 ? 0 : l - 1; i >= 0 && i < l; i += step) {\r\n            fn(stack[i], i);\r\n        }\r\n    };\r\n    Session.findDialogStackEntry = function (stack, dialogId, reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        var step = reverse ? -1 : 1;\r\n        var l = stack ? stack.length : 0;\r\n        for (var i = step > 0 ? 0 : l - 1; i >= 0 && i < l; i += step) {\r\n            if (stack[i].id === dialogId) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    Session.activeDialogStackEntry = function (stack) {\r\n        return stack && stack.length > 0 ? stack[stack.length - 1] : null;\r\n    };\r\n    Session.pushDialogStackEntry = function (stack, entry) {\r\n        if (!entry.state) {\r\n            entry.state = {};\r\n        }\r\n        stack = stack || [];\r\n        stack.push(entry);\r\n        return entry;\r\n    };\r\n    Session.popDialogStackEntry = function (stack) {\r\n        if (stack && stack.length > 0) {\r\n            stack.pop();\r\n        }\r\n        return Session.activeDialogStackEntry(stack);\r\n    };\r\n    Session.pruneDialogStack = function (stack, start) {\r\n        if (stack && stack.length > 0) {\r\n            stack.splice(start);\r\n        }\r\n        return Session.activeDialogStackEntry(stack);\r\n    };\r\n    Session.validateDialogStack = function (stack, root) {\r\n        var valid = true;\r\n        Session.forEachDialogStackEntry(stack, false, function (entry) {\r\n            var pair = entry.id.split(':');\r\n            if (!root.findDialog(pair[0], pair[1])) {\r\n                valid = false;\r\n            }\r\n        });\r\n        return valid;\r\n    };\r\n    Session.prototype.routeToActiveDialog = function (recognizeResult) {\r\n        var dialogStack = this.dialogStack();\r\n        if (Session.validateDialogStack(dialogStack, this.library)) {\r\n            var active = Session.activeDialogStackEntry(dialogStack);\r\n            if (active) {\r\n                var dialog = this.findDialog(active.id);\r\n                dialog.replyReceived(this, recognizeResult);\r\n            }\r\n            else {\r\n                this.beginDialog(this.options.dialogId, this.options.dialogArgs);\r\n            }\r\n        }\r\n        else {\r\n            this.error(new Error('Invalid Dialog Stack.'));\r\n        }\r\n    };\r\n    Session.prototype.startBatch = function () {\r\n        var _this = this;\r\n        this.batchStarted = true;\r\n        if (!this.sendingBatch) {\r\n            if (this.batchTimer) {\r\n                clearTimeout(this.batchTimer);\r\n            }\r\n            this.batchTimer = setTimeout(function () {\r\n                _this.sendBatch();\r\n            }, this.options.autoBatchDelay);\r\n        }\r\n    };\r\n    Session.prototype.createMessage = function (localizationNamespace, text, args) {\r\n        var message = new Message_1.Message(this)\r\n            .text(this.vgettext(localizationNamespace, Message_1.Message.randomPrompt(text), args));\r\n        return message.toMessage();\r\n    };\r\n    Session.prototype.prepareMessage = function (msg) {\r\n        if (!msg.type) {\r\n            msg.type = 'message';\r\n        }\r\n        if (!msg.address) {\r\n            msg.address = this.message.address;\r\n        }\r\n        if (!msg.textLocale && this.message.textLocale) {\r\n            msg.textLocale = this.message.textLocale;\r\n        }\r\n    };\r\n    Session.prototype.vgettext = function (localizationNamespace, messageid, args) {\r\n        var tmpl;\r\n        if (this.localizer && this.message) {\r\n            tmpl = this.localizer.gettext(this.preferredLocale(), messageid, localizationNamespace);\r\n        }\r\n        else {\r\n            tmpl = messageid;\r\n        }\r\n        return args && args.length > 0 ? sprintf.vsprintf(tmpl, args) : tmpl;\r\n    };\r\n    Session.prototype.validateCallstack = function () {\r\n        var ss = this.sessionState;\r\n        for (var i = 0; i < ss.callstack.length; i++) {\r\n            var id = ss.callstack[i].id;\r\n            if (!this.findDialog(id)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Session.prototype.resolveDialogId = function (id) {\r\n        return id.indexOf(':') >= 0 ? id : this.curLibraryName() + ':' + id;\r\n    };\r\n    Session.prototype.curLibraryName = function () {\r\n        var cur = this.curDialog();\r\n        return cur && !this.inMiddleware ? cur.id.split(':')[0] : this.library.name;\r\n    };\r\n    Session.prototype.findDialog = function (id) {\r\n        var parts = id.split(':');\r\n        return this.library.findDialog(parts[0] || this.library.name, parts[1]);\r\n    };\r\n    Session.prototype.pushDialog = function (ds) {\r\n        var ss = this.sessionState;\r\n        var cur = this.curDialog();\r\n        if (cur) {\r\n            cur.state = this.dialogData || {};\r\n        }\r\n        ss.callstack.push(ds);\r\n        this.dialogData = ds.state || {};\r\n        return ds;\r\n    };\r\n    Session.prototype.popDialog = function () {\r\n        var ss = this.sessionState;\r\n        if (ss.callstack.length > 0) {\r\n            ss.callstack.pop();\r\n        }\r\n        var cur = this.curDialog();\r\n        this.dialogData = cur ? cur.state : null;\r\n        return cur;\r\n    };\r\n    Session.prototype.deleteDialogs = function (dialogId) {\r\n        var ss = this.sessionState;\r\n        var index = -1;\r\n        if (typeof dialogId === 'string') {\r\n            for (var i = ss.callstack.length - 1; i >= 0; i--) {\r\n                if (ss.callstack[i].id == dialogId) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            index = dialogId;\r\n        }\r\n        if (index < 0 && index < ss.callstack.length) {\r\n            throw new Error('Unable to cancel dialog. Dialog[' + dialogId + '] not found.');\r\n        }\r\n        ss.callstack.splice(index);\r\n        var cur = this.curDialog();\r\n        this.dialogData = cur ? cur.state : null;\r\n        return cur;\r\n    };\r\n    Session.prototype.curDialog = function () {\r\n        var cur;\r\n        var ss = this.sessionState;\r\n        if (ss.callstack.length > 0) {\r\n            cur = ss.callstack[ss.callstack.length - 1];\r\n        }\r\n        return cur;\r\n    };\r\n    Session.prototype.getMessageReceived = function () {\r\n        console.warn(\"Session.getMessageReceived() is deprecated. Use Session.message.sourceEvent instead.\");\r\n        return this.message.sourceEvent;\r\n    };\r\n    return Session;\r\n}(events.EventEmitter));\r\nexports.Session = Session;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/Dialog.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ActionSet_1 = require(\"./ActionSet\");\r\nvar ResumeReason;\r\n(function (ResumeReason) {\r\n    ResumeReason[ResumeReason[\"completed\"] = 0] = \"completed\";\r\n    ResumeReason[ResumeReason[\"notCompleted\"] = 1] = \"notCompleted\";\r\n    ResumeReason[ResumeReason[\"canceled\"] = 2] = \"canceled\";\r\n    ResumeReason[ResumeReason[\"back\"] = 3] = \"back\";\r\n    ResumeReason[ResumeReason[\"forward\"] = 4] = \"forward\";\r\n    ResumeReason[ResumeReason[\"reprompt\"] = 5] = \"reprompt\";\r\n})(ResumeReason = exports.ResumeReason || (exports.ResumeReason = {}));\r\nvar Dialog = (function (_super) {\r\n    __extends(Dialog, _super);\r\n    function Dialog() {\r\n        return _super.apply(this, arguments) || this;\r\n    }\r\n    Dialog.prototype.begin = function (session, args) {\r\n        this.replyReceived(session);\r\n    };\r\n    Dialog.prototype.dialogResumed = function (session, result) {\r\n        if (result.error) {\r\n            session.error(result.error);\r\n        }\r\n    };\r\n    Dialog.prototype.recognize = function (context, cb) {\r\n        cb(null, { score: 0.1 });\r\n    };\r\n    return Dialog;\r\n}(ActionSet_1.ActionSet));\r\nexports.Dialog = Dialog;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/ActionSet.js":"\"use strict\";\r\nvar consts = require(\"../consts\");\r\nvar utils = require(\"../utils\");\r\nvar async = require(\"async\");\r\nvar ActionSet = (function () {\r\n    function ActionSet() {\r\n        this.actions = {};\r\n    }\r\n    ActionSet.prototype.clone = function (copyTo) {\r\n        var obj = copyTo || new ActionSet();\r\n        obj.trigger = this.trigger;\r\n        for (var name in this.actions) {\r\n            obj.actions[name] = this.actions[name];\r\n        }\r\n        return obj;\r\n    };\r\n    ActionSet.prototype.addDialogTrigger = function (actions, dialogId) {\r\n        if (this.trigger) {\r\n            this.trigger.localizationNamespace = dialogId.split(':')[0];\r\n            actions.beginDialogAction(dialogId, dialogId, this.trigger);\r\n        }\r\n    };\r\n    ActionSet.prototype.findActionRoutes = function (context, callback) {\r\n        var results = [{ score: 0.0, libraryName: context.libraryName }];\r\n        function addRoute(route) {\r\n            if (route.score > 0 && route.routeData) {\r\n                route.routeData.libraryName = context.libraryName;\r\n                if (route.score > results[0].score) {\r\n                    results = [route];\r\n                }\r\n                else if (route.score == results[0].score) {\r\n                    results.push(route);\r\n                }\r\n            }\r\n        }\r\n        function matchExpression(action, entry, cb) {\r\n            if (entry.options.matches) {\r\n                var bestScore = 0.0;\r\n                var routeData;\r\n                var matches = Array.isArray(entry.options.matches) ? entry.options.matches : [entry.options.matches];\r\n                matches.forEach(function (exp) {\r\n                    if (typeof exp == 'string') {\r\n                        if (context.intent && exp === context.intent.intent && context.intent.score > bestScore) {\r\n                            bestScore = context.intent.score;\r\n                            routeData = {\r\n                                action: action,\r\n                                intent: context.intent\r\n                            };\r\n                        }\r\n                    }\r\n                    else {\r\n                        var matches = exp.exec(text);\r\n                        if (matches && matches.length) {\r\n                            var intent = {\r\n                                score: matches[0].length / text.length,\r\n                                intent: exp.toString(),\r\n                                expression: exp,\r\n                                matched: matches\r\n                            };\r\n                            if (intent.score > bestScore) {\r\n                                bestScore = intent.score;\r\n                                routeData = {\r\n                                    action: action,\r\n                                    intent: intent\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                var intentThreshold = entry.options.intentThreshold || 0.1;\r\n                if (bestScore >= intentThreshold) {\r\n                    cb(null, bestScore, routeData);\r\n                }\r\n                else {\r\n                    cb(null, 0.0, null);\r\n                }\r\n            }\r\n            else {\r\n                cb(null, 0.0, null);\r\n            }\r\n        }\r\n        var text = context.message.text || '';\r\n        if (text.indexOf('action?') == 0) {\r\n            var parts = text.split('?')[1].split('=');\r\n            var name = parts[0];\r\n            if (this.actions.hasOwnProperty(name)) {\r\n                var options = this.actions[name].options;\r\n                var routeData = { action: name };\r\n                if (parts.length > 1) {\r\n                    parts.shift();\r\n                    routeData.data = parts.join('=');\r\n                }\r\n                addRoute({\r\n                    score: 1.0,\r\n                    libraryName: context.libraryName,\r\n                    routeType: context.routeType,\r\n                    routeData: routeData\r\n                });\r\n            }\r\n            callback(null, results);\r\n        }\r\n        else {\r\n            async.forEachOf(this.actions, function (entry, action, cb) {\r\n                if (entry.options.onFindAction) {\r\n                    entry.options.onFindAction(context, function (err, score, routeData) {\r\n                        if (!err) {\r\n                            routeData = routeData || {};\r\n                            routeData.action = action;\r\n                            addRoute({\r\n                                score: score,\r\n                                libraryName: context.libraryName,\r\n                                routeType: context.routeType,\r\n                                routeData: routeData\r\n                            });\r\n                        }\r\n                        cb(err);\r\n                    });\r\n                }\r\n                else {\r\n                    matchExpression(action, entry, function (err, score, routeData) {\r\n                        if (!err && routeData) {\r\n                            addRoute({\r\n                                score: score,\r\n                                libraryName: context.libraryName,\r\n                                routeType: context.routeType,\r\n                                routeData: routeData\r\n                            });\r\n                        }\r\n                        cb(err);\r\n                    });\r\n                }\r\n            }, function (err) {\r\n                if (!err) {\r\n                    callback(null, results);\r\n                }\r\n                else {\r\n                    callback(err, null);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ActionSet.prototype.selectActionRoute = function (session, route) {\r\n        function next() {\r\n            entry.handler(session, routeData);\r\n        }\r\n        var routeData = route.routeData;\r\n        var entry = this.actions[routeData.action];\r\n        if (entry.options.onSelectAction) {\r\n            entry.options.onSelectAction(session, routeData, next);\r\n        }\r\n        else {\r\n            next();\r\n        }\r\n    };\r\n    ActionSet.prototype.dialogInterrupted = function (session, dialogId, dialogArgs) {\r\n        var trigger = this.trigger;\r\n        function next() {\r\n            if (trigger && trigger.confirmPrompt) {\r\n                session.beginDialog(consts.DialogId.ConfirmInterruption, {\r\n                    dialogId: dialogId,\r\n                    dialogArgs: dialogArgs,\r\n                    confirmPrompt: trigger.confirmPrompt,\r\n                    localizationNamespace: trigger.localizationNamespace\r\n                });\r\n            }\r\n            else {\r\n                session.clearDialogStack();\r\n                session.beginDialog(dialogId, dialogArgs);\r\n            }\r\n        }\r\n        if (trigger && trigger.onInterrupted) {\r\n            this.trigger.onInterrupted(session, dialogId, dialogArgs, next);\r\n        }\r\n        else {\r\n            next();\r\n        }\r\n    };\r\n    ActionSet.prototype.cancelAction = function (name, msg, options) {\r\n        return this.action(name, function (session, args) {\r\n            if (options.confirmPrompt) {\r\n                session.beginDialog(consts.DialogId.ConfirmCancel, {\r\n                    localizationNamespace: args.libraryName,\r\n                    confirmPrompt: options.confirmPrompt,\r\n                    dialogIndex: args.dialogIndex,\r\n                    message: msg\r\n                });\r\n            }\r\n            else {\r\n                if (msg) {\r\n                    session.sendLocalized(args.libraryName, msg);\r\n                }\r\n                session.cancelDialog(args.dialogIndex);\r\n            }\r\n        }, options);\r\n    };\r\n    ActionSet.prototype.reloadAction = function (name, msg, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.action(name, function (session, args) {\r\n            if (msg) {\r\n                session.sendLocalized(args.libraryName, msg);\r\n            }\r\n            session.cancelDialog(args.dialogIndex, args.dialogId, options.dialogArgs);\r\n        }, options);\r\n    };\r\n    ActionSet.prototype.beginDialogAction = function (name, id, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return this.action(name, function (session, args) {\r\n            if (options.dialogArgs) {\r\n                utils.copyTo(options.dialogArgs, args);\r\n            }\r\n            if (id.indexOf(':') < 0) {\r\n                var lib = args.dialogId ? args.dialogId.split(':')[0] : args.libraryName;\r\n                id = lib + ':' + id;\r\n            }\r\n            if (session.sessionState.callstack.length > 0) {\r\n                if (options.isInterruption) {\r\n                    var parts = session.sessionState.callstack[0].id.split(':');\r\n                    var dialog = session.library.findDialog(parts[0], parts[1]);\r\n                    dialog.dialogInterrupted(session, id, args);\r\n                }\r\n                else {\r\n                    session.beginDialog(consts.DialogId.Interruption, { dialogId: id, dialogArgs: args });\r\n                }\r\n            }\r\n            else {\r\n                session.beginDialog(id, args);\r\n            }\r\n        }, options);\r\n    };\r\n    ActionSet.prototype.endConversationAction = function (name, msg, options) {\r\n        return this.action(name, function (session, args) {\r\n            if (options.confirmPrompt) {\r\n                session.beginDialog(consts.DialogId.ConfirmCancel, {\r\n                    localizationNamespace: args.libraryName,\r\n                    confirmPrompt: options.confirmPrompt,\r\n                    endConversation: true,\r\n                    message: msg\r\n                });\r\n            }\r\n            else {\r\n                if (msg) {\r\n                    session.sendLocalized(args.libraryName, msg);\r\n                }\r\n                session.endConversation();\r\n            }\r\n        }, options);\r\n    };\r\n    ActionSet.prototype.triggerAction = function (options) {\r\n        this.trigger = (options || {});\r\n        this.trigger.isInterruption = true;\r\n        ;\r\n        return this;\r\n    };\r\n    ActionSet.prototype.action = function (name, handler, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (this.actions.hasOwnProperty(name)) {\r\n            throw new Error(\"DialogAction[\" + name + \"] already exists.\");\r\n        }\r\n        this.actions[name] = { handler: handler, options: options };\r\n        return this;\r\n    };\r\n    return ActionSet;\r\n}());\r\nexports.ActionSet = ActionSet;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/consts.js":"\"use strict\";\r\nexports.agent = 'botbuilder';\r\nexports.messageType = 'message';\r\nexports.invokeType = 'invoke';\r\nexports.defaultConnector = '*';\r\nexports.emulatorChannel = 'emulator';\r\nexports.intentEntityType = 'intent';\r\nexports.Errors = {\r\n    EMSGSIZE: 'EMSGSIZE',\r\n    EBADMSG: 'EBADMSG'\r\n};\r\nexports.Library = {\r\n    system: 'BotBuilder',\r\n    default: '*'\r\n};\r\nexports.Data = {\r\n    SessionState: 'BotBuilder.Data.SessionState',\r\n    SessionId: 'BotBuilder.Data.SessionId',\r\n    Handler: 'BotBuilder.Data.Handler',\r\n    Group: 'BotBuilder.Data.Group',\r\n    Intent: 'BotBuilder.Data.Intent',\r\n    WaterfallStep: 'BotBuilder.Data.WaterfallStep',\r\n    Form: 'BotBuilder.Data.Form',\r\n    Field: 'BotBuilder.Data.Field',\r\n    FirstRunVersion: 'BotBuilder.Data.FirstRunVersion',\r\n    PreferredLocale: 'BotBuilder.Data.PreferredLocale'\r\n};\r\nexports.DialogId = {\r\n    Prompts: 'BotBuilder:Prompts',\r\n    FirstRun: 'BotBuilder:FirstRun',\r\n    ConfirmCancel: 'BotBuilder:ConfirmCancel',\r\n    ConfirmInterruption: 'BotBuilder:ConfirmInterruption',\r\n    Interruption: 'BotBuilder:Interruption',\r\n    Disambiguate: 'BotBuilder:Disambiguate'\r\n};\r\nexports.Id = {\r\n    DefaultGroup: 'BotBuilder.Id.DefaultGroup'\r\n};\r\nexports.Intents = {\r\n    Default: 'BotBuilder.Intents.Default'\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/utils.js":"\"use strict\";\r\nvar sprintf = require(\"sprintf-js\");\r\nfunction clone(obj) {\r\n    var cpy = {};\r\n    if (obj) {\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                cpy[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n    return cpy;\r\n}\r\nexports.clone = clone;\r\nfunction copyTo(frm, to) {\r\n    if (frm) {\r\n        for (var key in frm) {\r\n            if (frm.hasOwnProperty(key)) {\r\n                if (typeof to[key] === 'function') {\r\n                    to[key](frm[key]);\r\n                }\r\n                else {\r\n                    to[key] = frm[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.copyTo = copyTo;\r\nfunction copyFieldsTo(frm, to, fields) {\r\n    if (frm && to) {\r\n        fields.split('|').forEach(function (f) {\r\n            if (frm.hasOwnProperty(f)) {\r\n                if (typeof to[f] === 'function') {\r\n                    to[f](frm[f]);\r\n                }\r\n                else {\r\n                    to[f] = frm[f];\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.copyFieldsTo = copyFieldsTo;\r\nfunction moveFieldsTo(frm, to, fields) {\r\n    if (frm && to) {\r\n        for (var f in fields) {\r\n            if (frm.hasOwnProperty(f)) {\r\n                if (typeof to[f] === 'function') {\r\n                    to[fields[f]](frm[f]);\r\n                }\r\n                else {\r\n                    to[fields[f]] = frm[f];\r\n                }\r\n                delete frm[f];\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.moveFieldsTo = moveFieldsTo;\r\nfunction toDate8601(date) {\r\n    return sprintf.sprintf('%04d-%02d-%02d', date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate());\r\n}\r\nexports.toDate8601 = toDate8601;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/Message.js":"\"use strict\";\r\nvar HeroCard_1 = require(\"./cards/HeroCard\");\r\nvar CardImage_1 = require(\"./cards/CardImage\");\r\nvar CardAction_1 = require(\"./cards/CardAction\");\r\nvar utils = require(\"./utils\");\r\nvar consts = require(\"./consts\");\r\nvar sprintf = require(\"sprintf-js\");\r\nexports.TextFormat = {\r\n    plain: 'plain',\r\n    markdown: 'markdown',\r\n    xml: 'xml'\r\n};\r\nexports.AttachmentLayout = {\r\n    list: 'list',\r\n    carousel: 'carousel'\r\n};\r\nvar Message = (function () {\r\n    function Message(session) {\r\n        this.session = session;\r\n        this.data = {};\r\n        this.data.type = consts.messageType;\r\n        this.data.agent = consts.agent;\r\n        if (this.session) {\r\n            var m = this.session.message;\r\n            if (m.source) {\r\n                this.data.source = m.source;\r\n            }\r\n            if (m.textLocale) {\r\n                this.data.textLocale = m.textLocale;\r\n            }\r\n            if (m.address) {\r\n                this.data.address = m.address;\r\n            }\r\n        }\r\n    }\r\n    Message.prototype.textLocale = function (locale) {\r\n        this.data.textLocale = locale;\r\n        return this;\r\n    };\r\n    Message.prototype.textFormat = function (style) {\r\n        this.data.textFormat = style;\r\n        return this;\r\n    };\r\n    Message.prototype.text = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        this.data.text = text ? fmtText(this.session, text, args) : '';\r\n        return this;\r\n    };\r\n    Message.prototype.ntext = function (msg, msg_plural, count) {\r\n        var fmt = count == 1 ? Message.randomPrompt(msg) : Message.randomPrompt(msg_plural);\r\n        if (this.session) {\r\n            fmt = this.session.gettext(fmt);\r\n        }\r\n        this.data.text = sprintf.sprintf(fmt, count);\r\n        return this;\r\n    };\r\n    Message.prototype.compose = function (prompts) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (prompts) {\r\n            this.data.text = Message.composePrompt(this.session, prompts, args);\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.summary = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        this.data.summary = text ? fmtText(this.session, text, args) : '';\r\n        return this;\r\n    };\r\n    Message.prototype.attachmentLayout = function (style) {\r\n        this.data.attachmentLayout = style;\r\n        return this;\r\n    };\r\n    Message.prototype.attachments = function (list) {\r\n        this.data.attachments = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                this.addAttachment(list[i]);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.addAttachment = function (attachment) {\r\n        if (attachment) {\r\n            var a = attachment.toAttachment ? attachment.toAttachment() : attachment;\r\n            a = this.upgradeAttachment(a);\r\n            if (!this.data.attachments) {\r\n                this.data.attachments = [a];\r\n            }\r\n            else {\r\n                this.data.attachments.push(a);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.entities = function (list) {\r\n        this.data.entities = list || [];\r\n        return this;\r\n    };\r\n    Message.prototype.addEntity = function (obj) {\r\n        if (obj) {\r\n            if (!this.data.entities) {\r\n                this.data.entities = [obj];\r\n            }\r\n            else {\r\n                this.data.entities.push(obj);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.address = function (adr) {\r\n        if (adr) {\r\n            this.data.address = adr;\r\n            this.data.source = adr.channelId;\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.timestamp = function (time) {\r\n        this.data.timestamp = time || new Date().toISOString();\r\n        return this;\r\n    };\r\n    Message.prototype.sourceEvent = function (map) {\r\n        if (map) {\r\n            var channelId = this.data.address ? this.data.address.channelId : '*';\r\n            if (map.hasOwnProperty(channelId)) {\r\n                this.data.sourceEvent = map[channelId];\r\n            }\r\n            else if (map.hasOwnProperty('*')) {\r\n                this.data.sourceEvent = map['*'];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Message.prototype.toMessage = function () {\r\n        return utils.clone(this.data);\r\n    };\r\n    Message.prototype.upgradeAttachment = function (a) {\r\n        var isOldSchema = false;\r\n        for (var prop in a) {\r\n            switch (prop) {\r\n                case 'actions':\r\n                case 'fallbackText':\r\n                case 'title':\r\n                case 'titleLink':\r\n                case 'text':\r\n                case 'thumbnailUrl':\r\n                    isOldSchema = true;\r\n                    break;\r\n            }\r\n        }\r\n        if (isOldSchema) {\r\n            console.warn('Using old attachment schema. Upgrade to new card schema.');\r\n            var v2 = a;\r\n            var card = new HeroCard_1.HeroCard();\r\n            if (v2.title) {\r\n                card.title(v2.title);\r\n            }\r\n            if (v2.text) {\r\n                card.text(v2.text);\r\n            }\r\n            if (v2.thumbnailUrl) {\r\n                card.images([new CardImage_1.CardImage().url(v2.thumbnailUrl)]);\r\n            }\r\n            if (v2.titleLink) {\r\n                card.tap(CardAction_1.CardAction.openUrl(null, v2.titleLink));\r\n            }\r\n            if (v2.actions) {\r\n                var list = [];\r\n                for (var i = 0; i < v2.actions.length; i++) {\r\n                    var old = v2.actions[i];\r\n                    var btn = old.message ?\r\n                        CardAction_1.CardAction.imBack(null, old.message, old.title) :\r\n                        CardAction_1.CardAction.openUrl(null, old.url, old.title);\r\n                    if (old.image) {\r\n                        btn.image(old.image);\r\n                    }\r\n                    list.push(btn);\r\n                }\r\n                card.buttons(list);\r\n            }\r\n            return card.toAttachment();\r\n        }\r\n        else {\r\n            return a;\r\n        }\r\n    };\r\n    Message.randomPrompt = function (prompts) {\r\n        if (Array.isArray(prompts)) {\r\n            var i = Math.floor(Math.random() * prompts.length);\r\n            return prompts[i];\r\n        }\r\n        else {\r\n            return prompts;\r\n        }\r\n    };\r\n    Message.composePrompt = function (session, prompts, args) {\r\n        var connector = '';\r\n        var prompt = '';\r\n        for (var i = 0; i < prompts.length; i++) {\r\n            var txt = Message.randomPrompt(prompts[i]);\r\n            prompt += connector + (session ? session.gettext(txt) : txt);\r\n            connector = ' ';\r\n        }\r\n        return args && args.length > 0 ? sprintf.vsprintf(prompt, args) : prompt;\r\n    };\r\n    Message.prototype.setLanguage = function (local) {\r\n        console.warn(\"Message.setLanguage() is deprecated. Use Message.textLocal() instead.\");\r\n        return this.textLocale(local);\r\n    };\r\n    Message.prototype.setText = function (session, prompts) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        console.warn(\"Message.setText() is deprecated. Use Message.text() instead.\");\r\n        if (session && !this.session) {\r\n            this.session = session;\r\n        }\r\n        args.unshift(prompts);\r\n        return Message.prototype.text.apply(this, args);\r\n    };\r\n    Message.prototype.setNText = function (session, msg, msg_plural, count) {\r\n        console.warn(\"Message.setNText() is deprecated. Use Message.ntext() instead.\");\r\n        if (session && !this.session) {\r\n            this.session = session;\r\n        }\r\n        return this.ntext(msg, msg_plural, count);\r\n    };\r\n    Message.prototype.composePrompt = function (session, prompts) {\r\n        var args = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            args[_i - 2] = arguments[_i];\r\n        }\r\n        console.warn(\"Message.composePrompt() is deprecated. Use Message.compose() instead.\");\r\n        if (session && !this.session) {\r\n            this.session = session;\r\n        }\r\n        args.unshift(prompts);\r\n        return Message.prototype.compose.apply(this, args);\r\n    };\r\n    Message.prototype.setChannelData = function (data) {\r\n        console.warn(\"Message.setChannelData() is deprecated. Use Message.sourceEvent() instead.\");\r\n        return this.sourceEvent({ '*': data });\r\n    };\r\n    return Message;\r\n}());\r\nexports.Message = Message;\r\nfunction fmtText(session, prompts, args) {\r\n    var fmt = Message.randomPrompt(prompts);\r\n    if (session) {\r\n        fmt = session.gettext(fmt);\r\n    }\r\n    return args && args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;\r\n}\r\nexports.fmtText = fmtText;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/HeroCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ThumbnailCard_1 = require(\"./ThumbnailCard\");\r\nvar HeroCard = (function (_super) {\r\n    __extends(HeroCard, _super);\r\n    function HeroCard(session) {\r\n        var _this = _super.call(this, session) || this;\r\n        _this.data.contentType = 'application/vnd.microsoft.card.hero';\r\n        return _this;\r\n    }\r\n    return HeroCard;\r\n}(ThumbnailCard_1.ThumbnailCard));\r\nexports.HeroCard = HeroCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/ThumbnailCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Message_1 = require(\"../Message\");\r\nvar Keyboard_1 = require(\"./Keyboard\");\r\nvar ThumbnailCard = (function (_super) {\r\n    __extends(ThumbnailCard, _super);\r\n    function ThumbnailCard(session) {\r\n        var _this = _super.call(this, session) || this;\r\n        _this.data.contentType = 'application/vnd.microsoft.card.thumbnail';\r\n        return _this;\r\n    }\r\n    ThumbnailCard.prototype.title = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.title = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ThumbnailCard.prototype.subtitle = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.subtitle = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ThumbnailCard.prototype.text = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.text = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ThumbnailCard.prototype.images = function (list) {\r\n        this.data.content.images = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var image = list[i];\r\n                this.data.content.images.push(image.toImage ? image.toImage() : image);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    ThumbnailCard.prototype.tap = function (action) {\r\n        if (action) {\r\n            this.data.content.tap = action.toAction ? action.toAction() : action;\r\n        }\r\n        return this;\r\n    };\r\n    return ThumbnailCard;\r\n}(Keyboard_1.Keyboard));\r\nexports.ThumbnailCard = ThumbnailCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/Keyboard.js":"\"use strict\";\r\nvar Keyboard = (function () {\r\n    function Keyboard(session) {\r\n        this.session = session;\r\n        this.data = {\r\n            contentType: 'application/vnd.microsoft.keyboard',\r\n            content: {}\r\n        };\r\n    }\r\n    Keyboard.prototype.buttons = function (list) {\r\n        this.data.content.buttons = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var action = list[i];\r\n                this.data.content.buttons.push(action.toAction ? action.toAction() : action);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Keyboard.prototype.toAttachment = function () {\r\n        return this.data;\r\n    };\r\n    return Keyboard;\r\n}());\r\nexports.Keyboard = Keyboard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/CardImage.js":"\"use strict\";\r\nvar Message_1 = require(\"../Message\");\r\nvar CardImage = (function () {\r\n    function CardImage(session) {\r\n        this.session = session;\r\n        this.data = {};\r\n    }\r\n    CardImage.prototype.url = function (u) {\r\n        if (u) {\r\n            this.data.url = u;\r\n        }\r\n        return this;\r\n    };\r\n    CardImage.prototype.alt = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.alt = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    CardImage.prototype.tap = function (action) {\r\n        if (action) {\r\n            this.data.tap = action.toAction ? action.toAction() : action;\r\n        }\r\n        return this;\r\n    };\r\n    CardImage.prototype.toImage = function () {\r\n        return this.data;\r\n    };\r\n    CardImage.create = function (session, url) {\r\n        return new CardImage(session).url(url);\r\n    };\r\n    return CardImage;\r\n}());\r\nexports.CardImage = CardImage;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/CardAction.js":"\"use strict\";\r\nvar Message_1 = require(\"../Message\");\r\nvar CardAction = (function () {\r\n    function CardAction(session) {\r\n        this.session = session;\r\n        this.data = {};\r\n    }\r\n    CardAction.prototype.type = function (t) {\r\n        if (t) {\r\n            this.data.type = t;\r\n        }\r\n        return this;\r\n    };\r\n    CardAction.prototype.title = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.title = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    CardAction.prototype.value = function (v) {\r\n        if (v) {\r\n            this.data.value = v;\r\n        }\r\n        return this;\r\n    };\r\n    CardAction.prototype.image = function (url) {\r\n        if (url) {\r\n            this.data.image = url;\r\n        }\r\n        return this;\r\n    };\r\n    CardAction.prototype.toAction = function () {\r\n        return this.data;\r\n    };\r\n    CardAction.call = function (session, number, title) {\r\n        return new CardAction(session).type('call').value(number).title(title || \"Click to call\");\r\n    };\r\n    CardAction.openUrl = function (session, url, title) {\r\n        return new CardAction(session).type('openUrl').value(url).title(title || \"Click to open website in your browser\");\r\n    };\r\n    CardAction.imBack = function (session, msg, title) {\r\n        return new CardAction(session).type('imBack').value(msg).title(title || \"Click to send response to bot\");\r\n    };\r\n    CardAction.postBack = function (session, msg, title) {\r\n        return new CardAction(session).type('postBack').value(msg).title(title || \"Click to send response to bot\");\r\n    };\r\n    CardAction.playAudio = function (session, url, title) {\r\n        return new CardAction(session).type('playAudio').value(url).title(title || \"Click to play audio file\");\r\n    };\r\n    CardAction.playVideo = function (session, url, title) {\r\n        return new CardAction(session).type('playVideo').value(url).title(title || \"Click to play video\");\r\n    };\r\n    CardAction.showImage = function (session, url, title) {\r\n        return new CardAction(session).type('showImage').value(url).title(title || \"Click to view image\");\r\n    };\r\n    CardAction.downloadFile = function (session, url, title) {\r\n        return new CardAction(session).type('downloadFile').value(url).title(title || \"Click to download file\");\r\n    };\r\n    CardAction.dialogAction = function (session, action, data, title) {\r\n        var value = 'action?' + action;\r\n        if (data) {\r\n            value += '=' + data;\r\n        }\r\n        return new CardAction(session).type('postBack').value(value).title(title || \"Click to send response to bot\");\r\n    };\r\n    return CardAction;\r\n}());\r\nexports.CardAction = CardAction;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/logger.js":"\"use strict\";\r\nvar Prompts_1 = require(\"./dialogs/Prompts\");\r\nvar Channel = require(\"./Channel\");\r\nvar consts = require(\"./consts\");\r\nvar sprintf = require(\"sprintf-js\");\r\nvar debugLoggingEnabled = new RegExp('\\\\bbotbuilder\\\\b', 'i').test(process.env.NODE_DEBUG || '');\r\nfunction error(fmt) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var msg = args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;\r\n    console.error('ERROR: ' + msg);\r\n}\r\nexports.error = error;\r\nfunction warn(addressable, fmt) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    var prefix = getPrefix(addressable);\r\n    var msg = args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;\r\n    console.warn(prefix + 'WARN: ' + msg);\r\n}\r\nexports.warn = warn;\r\nfunction info(addressable, fmt) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    var channelId = Channel.getChannelId(addressable);\r\n    if (channelId === Channel.channels.emulator || debugLoggingEnabled) {\r\n        var prefix = getPrefix(addressable);\r\n        var msg = args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;\r\n        console.info(prefix + msg);\r\n    }\r\n}\r\nexports.info = info;\r\nfunction debug(fmt) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    debugLog(false, fmt, args);\r\n}\r\nexports.debug = debug;\r\nfunction trace(fmt) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    debugLog(true, fmt, args);\r\n}\r\nexports.trace = trace;\r\nfunction debugLog(trace, fmt, args) {\r\n    if (!debugLoggingEnabled) {\r\n        return;\r\n    }\r\n    var msg = args.length > 0 ? sprintf.vsprintf(fmt, args) : fmt;\r\n    if (trace) {\r\n        console.trace(msg);\r\n    }\r\n    else {\r\n        console.log(msg);\r\n    }\r\n}\r\nfunction getPrefix(addressable) {\r\n    var prefix = '';\r\n    if (addressable && addressable.sessionState && addressable.sessionState.callstack) {\r\n        var callstack = addressable.sessionState.callstack;\r\n        for (var i = 0; i < callstack.length; i++) {\r\n            if (i == callstack.length - 1) {\r\n                var cur = callstack[i];\r\n                switch (cur.id) {\r\n                    case consts.DialogId.Prompts:\r\n                        var promptType = Prompts_1.PromptType[cur.state.promptType];\r\n                        prefix += 'Prompts.' + promptType + ' - ';\r\n                        break;\r\n                    case consts.DialogId.FirstRun:\r\n                        prefix += 'Middleware.firstRun - ';\r\n                        break;\r\n                    default:\r\n                        if (cur.id.indexOf('*:') == 0) {\r\n                            prefix += cur.id.substr(2) + ' - ';\r\n                        }\r\n                        else {\r\n                            prefix += cur.id + ' - ';\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                prefix += '.';\r\n            }\r\n        }\r\n    }\r\n    return prefix;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/Prompts.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Dialog_1 = require(\"./Dialog\");\r\nvar Session_1 = require(\"../Session\");\r\nvar EntityRecognizer_1 = require(\"./EntityRecognizer\");\r\nvar Message_1 = require(\"../Message\");\r\nvar Library_1 = require(\"../bots/Library\");\r\nvar Keyboard_1 = require(\"../cards/Keyboard\");\r\nvar CardAction_1 = require(\"../cards/CardAction\");\r\nvar Channel = require(\"../Channel\");\r\nvar consts = require(\"../consts\");\r\nvar logger = require(\"../logger\");\r\nvar PromptType;\r\n(function (PromptType) {\r\n    PromptType[PromptType[\"text\"] = 0] = \"text\";\r\n    PromptType[PromptType[\"number\"] = 1] = \"number\";\r\n    PromptType[PromptType[\"confirm\"] = 2] = \"confirm\";\r\n    PromptType[PromptType[\"choice\"] = 3] = \"choice\";\r\n    PromptType[PromptType[\"time\"] = 4] = \"time\";\r\n    PromptType[PromptType[\"attachment\"] = 5] = \"attachment\";\r\n})(PromptType = exports.PromptType || (exports.PromptType = {}));\r\nvar ListStyle;\r\n(function (ListStyle) {\r\n    ListStyle[ListStyle[\"none\"] = 0] = \"none\";\r\n    ListStyle[ListStyle[\"inline\"] = 1] = \"inline\";\r\n    ListStyle[ListStyle[\"list\"] = 2] = \"list\";\r\n    ListStyle[ListStyle[\"button\"] = 3] = \"button\";\r\n    ListStyle[ListStyle[\"auto\"] = 4] = \"auto\";\r\n})(ListStyle = exports.ListStyle || (exports.ListStyle = {}));\r\nvar SimplePromptRecognizer = (function () {\r\n    function SimplePromptRecognizer() {\r\n    }\r\n    SimplePromptRecognizer.prototype.recognize = function (args, callback, session) {\r\n        function findChoice(args, text) {\r\n            var best = EntityRecognizer_1.EntityRecognizer.findBestMatch(args.enumValues, text);\r\n            if (!best) {\r\n                var n = EntityRecognizer_1.EntityRecognizer.parseNumber(text);\r\n                if (!isNaN(n) && n > 0 && n <= args.enumValues.length) {\r\n                    best = { index: n - 1, entity: args.enumValues[n - 1], score: 1.0 };\r\n                }\r\n            }\r\n            return best;\r\n        }\r\n        var score = 0.0;\r\n        var response;\r\n        var text = args.utterance.trim();\r\n        switch (args.promptType) {\r\n            default:\r\n            case PromptType.text:\r\n                score = 0.5;\r\n                response = text;\r\n                break;\r\n            case PromptType.number:\r\n                var n = EntityRecognizer_1.EntityRecognizer.parseNumber(text);\r\n                if (!isNaN(n)) {\r\n                    var score = n.toString().length / text.length;\r\n                    response = n;\r\n                }\r\n                break;\r\n            case PromptType.confirm:\r\n                var b = EntityRecognizer_1.EntityRecognizer.parseBoolean(text);\r\n                if (typeof b !== 'boolean') {\r\n                    var best = findChoice(args, text);\r\n                    if (best) {\r\n                        b = (best.index === 0);\r\n                    }\r\n                }\r\n                if (typeof b == 'boolean') {\r\n                    score = 1.0;\r\n                    response = b;\r\n                }\r\n                break;\r\n            case PromptType.time:\r\n                var entity = EntityRecognizer_1.EntityRecognizer.recognizeTime(text, args.refDate ? new Date(args.refDate) : null);\r\n                if (entity) {\r\n                    score = entity.entity.length / text.length;\r\n                    response = entity;\r\n                }\r\n                break;\r\n            case PromptType.choice:\r\n                var best = findChoice(args, text);\r\n                if (best) {\r\n                    score = best.score;\r\n                    response = best;\r\n                }\r\n                break;\r\n            case PromptType.attachment:\r\n                if (args.attachments && args.attachments.length > 0) {\r\n                    score = 1.0;\r\n                    response = args.attachments;\r\n                }\r\n                break;\r\n        }\r\n        if (score > 0) {\r\n            callback({ score: score, resumed: Dialog_1.ResumeReason.completed, promptType: args.promptType, response: response });\r\n        }\r\n        else {\r\n            callback({ score: score, resumed: Dialog_1.ResumeReason.notCompleted, promptType: args.promptType });\r\n        }\r\n    };\r\n    return SimplePromptRecognizer;\r\n}());\r\nexports.SimplePromptRecognizer = SimplePromptRecognizer;\r\nvar Prompts = (function (_super) {\r\n    __extends(Prompts, _super);\r\n    function Prompts() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Prompts.prototype.begin = function (session, args) {\r\n        args = args || {};\r\n        args.promptAfterAction = args.hasOwnProperty('promptAfterAction') ? args.promptAfterAction : Prompts.options.promptAfterAction;\r\n        args.retryCnt = 0;\r\n        for (var key in args) {\r\n            if (args.hasOwnProperty(key)) {\r\n                session.dialogData[key] = args[key];\r\n            }\r\n        }\r\n        this.sendPrompt(session, args);\r\n    };\r\n    Prompts.prototype.replyReceived = function (session, result) {\r\n        var args = session.dialogData;\r\n        if (result.error || result.resumed == Dialog_1.ResumeReason.completed) {\r\n            result.promptType = args.promptType;\r\n            session.endDialogWithResult(result);\r\n        }\r\n        else if (typeof args.maxRetries === 'number' && args.retryCnt >= args.maxRetries) {\r\n            result.promptType = args.promptType;\r\n            result.resumed = Dialog_1.ResumeReason.notCompleted;\r\n            session.endDialogWithResult(result);\r\n        }\r\n        else {\r\n            args.retryCnt++;\r\n            this.sendPrompt(session, args, true);\r\n        }\r\n    };\r\n    Prompts.prototype.dialogResumed = function (session, result) {\r\n        var args = session.dialogData;\r\n        if (args.promptAfterAction) {\r\n            this.sendPrompt(session, args);\r\n        }\r\n    };\r\n    Prompts.prototype.recognize = function (context, cb) {\r\n        var args = context.dialogData;\r\n        Prompts.options.recognizer.recognize({\r\n            promptType: args.promptType,\r\n            utterance: context.message.text,\r\n            locale: context.message.textLocale,\r\n            attachments: context.message.attachments,\r\n            enumValues: args.enumValues,\r\n            refDate: args.refDate\r\n        }, function (result) {\r\n            if (result.error) {\r\n                cb(result.error, null);\r\n            }\r\n            else {\r\n                cb(null, result);\r\n            }\r\n        });\r\n    };\r\n    Prompts.prototype.sendPrompt = function (session, args, retry) {\r\n        if (retry === void 0) { retry = false; }\r\n        logger.debug(\"prompts::sendPrompt called\");\r\n        var msg;\r\n        if (retry && typeof args.retryPrompt === 'object' && !Array.isArray(args.retryPrompt)) {\r\n            msg = args.retryPrompt;\r\n        }\r\n        else if (typeof args.prompt === 'object' && !Array.isArray(args.prompt)) {\r\n            msg = args.prompt;\r\n        }\r\n        else {\r\n            msg = this.createPrompt(session, args, retry);\r\n        }\r\n        session.send(msg);\r\n        session.sendBatch();\r\n    };\r\n    Prompts.prototype.createPrompt = function (session, args, retry) {\r\n        var msg = new Message_1.Message(session);\r\n        var locale = session.preferredLocale();\r\n        var localizationNamespace = args.localizationNamespace;\r\n        var style = ListStyle.none;\r\n        if (args.promptType == PromptType.choice || args.promptType == PromptType.confirm) {\r\n            style = args.listStyle;\r\n            if (style == ListStyle.auto) {\r\n                if (Channel.supportsKeyboards(session, args.enumValues.length)) {\r\n                    style = ListStyle.button;\r\n                }\r\n                else if (!retry && args.promptType == PromptType.choice) {\r\n                    style = args.enumValues.length < 3 ? ListStyle.inline : ListStyle.list;\r\n                }\r\n                else {\r\n                    style = ListStyle.none;\r\n                }\r\n            }\r\n        }\r\n        var prompt;\r\n        if (retry) {\r\n            if (args.retryPrompt) {\r\n                prompt = Message_1.Message.randomPrompt(args.retryPrompt);\r\n            }\r\n            else {\r\n                var type = PromptType[args.promptType];\r\n                prompt = Prompts.defaultRetryPrompt[type];\r\n                localizationNamespace = consts.Library.system;\r\n            }\r\n        }\r\n        else {\r\n            prompt = Message_1.Message.randomPrompt(args.prompt);\r\n        }\r\n        var text = session.localizer.gettext(locale, prompt, localizationNamespace);\r\n        var connector = '';\r\n        var list;\r\n        switch (style) {\r\n            case ListStyle.button:\r\n                var buttons = [];\r\n                for (var i = 0; i < session.dialogData.enumValues.length; i++) {\r\n                    var option = session.dialogData.enumValues[i];\r\n                    buttons.push(CardAction_1.CardAction.imBack(session, option, option));\r\n                }\r\n                msg.text(text)\r\n                    .attachments([new Keyboard_1.Keyboard(session).buttons(buttons)]);\r\n                break;\r\n            case ListStyle.inline:\r\n                list = ' (';\r\n                args.enumValues.forEach(function (v, index) {\r\n                    var value = v.toString();\r\n                    list += connector + (index + 1) + '. ' + session.localizer.gettext(locale, value, consts.Library.system);\r\n                    if (index == args.enumValues.length - 2) {\r\n                        connector = index == 0 ? session.localizer.gettext(locale, \"list_or\", consts.Library.system) : session.localizer.gettext(locale, \"list_or_more\", consts.Library.system);\r\n                    }\r\n                    else {\r\n                        connector = ', ';\r\n                    }\r\n                });\r\n                list += ')';\r\n                msg.text(text + '%s', list);\r\n                break;\r\n            case ListStyle.list:\r\n                list = '\\n   ';\r\n                args.enumValues.forEach(function (v, index) {\r\n                    var value = v.toString();\r\n                    list += connector + (index + 1) + '. ' + session.localizer.gettext(locale, value, args.localizationNamespace);\r\n                    connector = '\\n   ';\r\n                });\r\n                msg.text(text + '%s', list);\r\n                break;\r\n            default:\r\n                msg.text(text);\r\n                break;\r\n        }\r\n        return msg;\r\n    };\r\n    Prompts.configure = function (options) {\r\n        if (options) {\r\n            for (var key in options) {\r\n                if (options.hasOwnProperty(key)) {\r\n                    Prompts.options[key] = options[key];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Prompts.text = function (session, prompt, options) {\r\n        Prompts.validateSession(session);\r\n        var args = options || {};\r\n        args.promptType = PromptType.text;\r\n        args.prompt = prompt;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.number = function (session, prompt, options) {\r\n        Prompts.validateSession(session);\r\n        var args = options || {};\r\n        args.promptType = PromptType.number;\r\n        args.prompt = prompt;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.confirm = function (session, prompt, options) {\r\n        Prompts.validateSession(session);\r\n        var locale = session.preferredLocale();\r\n        var args = options || {};\r\n        args.promptType = PromptType.confirm;\r\n        args.prompt = prompt;\r\n        args.enumValues = [\r\n            session.localizer.gettext(locale, 'confirm_yes', consts.Library.system),\r\n            session.localizer.gettext(locale, 'confirm_no', consts.Library.system)\r\n        ];\r\n        args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : ListStyle.auto;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.choice = function (session, prompt, choices, options) {\r\n        Prompts.validateSession(session);\r\n        var args = options || {};\r\n        args.promptType = PromptType.choice;\r\n        args.prompt = prompt;\r\n        args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : ListStyle.auto;\r\n        var c = EntityRecognizer_1.EntityRecognizer.expandChoices(choices);\r\n        if (c.length == 0) {\r\n            console.error(\"0 length choice for prompt:\", prompt);\r\n            throw \"0 length choice list supplied\";\r\n        }\r\n        args.enumValues = c;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.time = function (session, prompt, options) {\r\n        Prompts.validateSession(session);\r\n        var args = options || {};\r\n        args.promptType = PromptType.time;\r\n        args.prompt = prompt;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.attachment = function (session, prompt, options) {\r\n        Prompts.validateSession(session);\r\n        var args = options || {};\r\n        args.promptType = PromptType.attachment;\r\n        args.prompt = prompt;\r\n        beginPrompt(session, args);\r\n    };\r\n    Prompts.disambiguate = function (session, prompt, choices, options) {\r\n        Prompts.validateSession(session);\r\n        session.beginDialog(consts.DialogId.Disambiguate, {\r\n            prompt: prompt,\r\n            choices: choices,\r\n            options: options\r\n        });\r\n    };\r\n    Prompts.validateSession = function (session) {\r\n        if (!session || typeof session != 'object') {\r\n            throw 'Session should be provided as first parameter.';\r\n        }\r\n    };\r\n    return Prompts;\r\n}(Dialog_1.Dialog));\r\nPrompts.options = {\r\n    recognizer: new SimplePromptRecognizer(),\r\n    promptAfterAction: true\r\n};\r\nPrompts.defaultRetryPrompt = {\r\n    text: \"default_text\",\r\n    number: \"default_number\",\r\n    confirm: \"default_confirm\",\r\n    choice: \"default_choice\",\r\n    time: \"default_time\",\r\n    attachment: \"default_file\"\r\n};\r\nexports.Prompts = Prompts;\r\nLibrary_1.systemLib.dialog(consts.DialogId.Prompts, new Prompts());\r\nfunction beginPrompt(session, args) {\r\n    if (!args.localizationNamespace) {\r\n        var cur = Session_1.Session.activeDialogStackEntry(session.dialogStack());\r\n        args.localizationNamespace = cur ? cur.id.split(':')[0] : session.library.name;\r\n    }\r\n    if (typeof args.prompt == 'object' && args.prompt.toMessage) {\r\n        args.prompt = args.prompt.toMessage();\r\n    }\r\n    if (typeof args.retryPrompt == 'object' && args.retryPrompt.toMessage) {\r\n        args.retryPrompt = args.retryPrompt.toMessage();\r\n    }\r\n    session.beginDialog(consts.DialogId.Prompts, args);\r\n}\r\nLibrary_1.systemLib.dialog(consts.DialogId.ConfirmCancel, [\r\n    function (session, args) {\r\n        session.dialogData.localizationNamespace = args.localizationNamespace;\r\n        session.dialogData.dialogIndex = args.dialogIndex;\r\n        session.dialogData.message = args.message;\r\n        session.dialogData.endConversation = args.endConversation;\r\n        Prompts.confirm(session, args.confirmPrompt, { localizationNamespace: args.localizationNamespace });\r\n    },\r\n    function (session, results) {\r\n        if (results.response) {\r\n            var args = session.dialogData;\r\n            if (args.message) {\r\n                session.sendLocalized(args.localizationNamespace, args.message);\r\n            }\r\n            if (args.endConversation) {\r\n                session.endConversation();\r\n            }\r\n            else {\r\n                session.cancelDialog(args.dialogIndex);\r\n            }\r\n        }\r\n        else {\r\n            session.endDialogWithResult({ resumed: Dialog_1.ResumeReason.reprompt });\r\n        }\r\n    }\r\n]);\r\nLibrary_1.systemLib.dialog(consts.DialogId.ConfirmInterruption, [\r\n    function (session, args) {\r\n        session.dialogData.dialogId = args.dialogId;\r\n        session.dialogData.dialogArgs = args.dialogArgs;\r\n        Prompts.confirm(session, args.confirmPrompt, { localizationNamespace: args.localizationNamespace });\r\n    },\r\n    function (session, results) {\r\n        if (results.response) {\r\n            var args = session.dialogData;\r\n            session.clearDialogStack();\r\n            session.beginDialog(args.dialogId, args.dialogArgs);\r\n        }\r\n        else {\r\n            session.endDialogWithResult({ resumed: Dialog_1.ResumeReason.reprompt });\r\n        }\r\n    }\r\n]);\r\nLibrary_1.systemLib.dialog(consts.DialogId.Interruption, [\r\n    function (session, args) {\r\n        if (session.sessionState.callstack.length > 1) {\r\n            session.beginDialog(args.dialogId, args.dialogArgs);\r\n        }\r\n        else {\r\n            session.replaceDialog(args.dialogId, args.dialogArgs);\r\n        }\r\n    },\r\n    function (session, results) {\r\n        session.endDialogWithResult({ resumed: Dialog_1.ResumeReason.reprompt });\r\n    }\r\n]);\r\nLibrary_1.systemLib.dialog(consts.DialogId.Disambiguate, [\r\n    function (session, args) {\r\n        session.dialogData.choices = args.choices;\r\n        Prompts.choice(session, args.prompt, args.choices, args.options);\r\n    },\r\n    function (session, results) {\r\n        var route = session.dialogData.choices[results.response.entity];\r\n        if (route) {\r\n            var stack = session.dialogStack();\r\n            stack.pop();\r\n            session.dialogStack(stack);\r\n            session.library.library(route.libraryName).selectRoute(session, route);\r\n        }\r\n        else {\r\n            session.endDialogWithResult({ resumed: Dialog_1.ResumeReason.reprompt });\r\n        }\r\n    }\r\n]);\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/EntityRecognizer.js":"\"use strict\";\r\nvar utils = require(\"../utils\");\r\nvar chrono = require(\"chrono-node\");\r\nvar EntityRecognizer = (function () {\r\n    function EntityRecognizer() {\r\n    }\r\n    EntityRecognizer.findEntity = function (entities, type) {\r\n        for (var i = 0; entities && i < entities.length; i++) {\r\n            if (entities[i].type == type) {\r\n                return entities[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    EntityRecognizer.findAllEntities = function (entities, type) {\r\n        var found = [];\r\n        for (var i = 0; entities && i < entities.length; i++) {\r\n            if (entities[i].type == type) {\r\n                found.push(entities[i]);\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    EntityRecognizer.parseTime = function (entities) {\r\n        if (typeof entities == 'string') {\r\n            entities = [EntityRecognizer.recognizeTime(entities)];\r\n        }\r\n        return EntityRecognizer.resolveTime(entities);\r\n    };\r\n    EntityRecognizer.resolveTime = function (entities) {\r\n        var _this = this;\r\n        var now = new Date();\r\n        var resolvedDate;\r\n        var date;\r\n        var time;\r\n        entities.forEach(function (entity) {\r\n            if (entity.resolution) {\r\n                switch (entity.resolution.resolution_type || entity.type) {\r\n                    case 'builtin.datetime':\r\n                    case 'builtin.datetime.date':\r\n                    case 'builtin.datetime.time':\r\n                        var parts = (entity.resolution.date || entity.resolution.time).split('T');\r\n                        if (!date && _this.dateExp.test(parts[0])) {\r\n                            date = parts[0];\r\n                        }\r\n                        if (!time && parts[1]) {\r\n                            time = 'T' + parts[1];\r\n                            if (time == 'TMO') {\r\n                                time = 'T08:00:00';\r\n                            }\r\n                            else if (time == 'TNI') {\r\n                                time = 'T20:00:00';\r\n                            }\r\n                            else if (time.length == 3) {\r\n                                time = time + ':00:00';\r\n                            }\r\n                            else if (time.length == 6) {\r\n                                time = time + ':00';\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'chrono.duration':\r\n                        var duration = entity;\r\n                        resolvedDate = duration.resolution.start;\r\n                }\r\n            }\r\n        });\r\n        if (!resolvedDate && (date || time)) {\r\n            if (!date) {\r\n                date = utils.toDate8601(now);\r\n            }\r\n            if (time) {\r\n                date += time;\r\n            }\r\n            resolvedDate = new Date(date);\r\n        }\r\n        return resolvedDate;\r\n    };\r\n    EntityRecognizer.recognizeTime = function (utterance, refDate) {\r\n        var response;\r\n        try {\r\n            var results = chrono.parse(utterance, refDate);\r\n            if (results && results.length > 0) {\r\n                var duration = results[0];\r\n                response = {\r\n                    type: 'chrono.duration',\r\n                    entity: duration.text,\r\n                    startIndex: duration.index,\r\n                    endIndex: duration.index + duration.text.length,\r\n                    resolution: {\r\n                        resolution_type: 'chrono.duration',\r\n                        start: duration.start.date()\r\n                    }\r\n                };\r\n                if (duration.end) {\r\n                    response.resolution.end = duration.end.date();\r\n                }\r\n                if (duration.ref) {\r\n                    response.resolution.ref = duration.ref;\r\n                }\r\n                response.score = duration.text.length / utterance.length;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error('Error recognizing time: ' + err.toString());\r\n            response = null;\r\n        }\r\n        return response;\r\n    };\r\n    EntityRecognizer.parseNumber = function (entities) {\r\n        var entity;\r\n        if (typeof entities == 'string') {\r\n            entity = { type: 'text', entity: entities.trim() };\r\n        }\r\n        else {\r\n            entity = EntityRecognizer.findEntity(entities, 'builtin.number');\r\n        }\r\n        if (entity) {\r\n            var match = this.numberExp.exec(entity.entity);\r\n            if (match) {\r\n                return Number(match[0]);\r\n            }\r\n            var oWordMatch = this.findBestMatch(this.ordinalWords, entity.entity, 1.0);\r\n            if (oWordMatch) {\r\n                return oWordMatch.index + 1;\r\n            }\r\n        }\r\n        return Number.NaN;\r\n    };\r\n    EntityRecognizer.parseBoolean = function (utterance) {\r\n        utterance = utterance.trim();\r\n        if (EntityRecognizer.yesExp.test(utterance)) {\r\n            return true;\r\n        }\r\n        else if (EntityRecognizer.noExp.test(utterance)) {\r\n            return false;\r\n        }\r\n        return undefined;\r\n    };\r\n    EntityRecognizer.findBestMatch = function (choices, utterance, threshold) {\r\n        if (threshold === void 0) { threshold = 0.6; }\r\n        var best;\r\n        var matches = EntityRecognizer.findAllMatches(choices, utterance, threshold);\r\n        matches.forEach(function (value) {\r\n            if (!best || value.score > best.score) {\r\n                best = value;\r\n            }\r\n        });\r\n        return best;\r\n    };\r\n    EntityRecognizer.findAllMatches = function (choices, utterance, threshold) {\r\n        if (threshold === void 0) { threshold = 0.6; }\r\n        var matches = [];\r\n        utterance = utterance.trim().toLowerCase();\r\n        var tokens = utterance.split(' ');\r\n        EntityRecognizer.expandChoices(choices).forEach(function (choice, index) {\r\n            var score = 0.0;\r\n            var value = choice.trim().toLowerCase();\r\n            if (value.indexOf(utterance) >= 0) {\r\n                score = utterance.length / value.length;\r\n            }\r\n            else if (utterance.indexOf(value) >= 0) {\r\n                score = Math.min(0.5 + (value.length / utterance.length), 0.9);\r\n            }\r\n            else {\r\n                var matched = '';\r\n                tokens.forEach(function (token) {\r\n                    if (value.indexOf(token) >= 0) {\r\n                        matched += token;\r\n                    }\r\n                });\r\n                score = matched.length / value.length;\r\n            }\r\n            if (score >= threshold) {\r\n                matches.push({ index: index, entity: choice, score: score });\r\n            }\r\n        });\r\n        return matches;\r\n    };\r\n    EntityRecognizer.expandChoices = function (choices) {\r\n        if (!choices) {\r\n            return [];\r\n        }\r\n        else if (Array.isArray(choices)) {\r\n            return choices;\r\n        }\r\n        else if (typeof choices == 'string') {\r\n            return choices.split('|');\r\n        }\r\n        else if (typeof choices == 'object') {\r\n            var list = [];\r\n            for (var key in choices) {\r\n                list.push(key);\r\n            }\r\n            return list;\r\n        }\r\n        else {\r\n            return [choices.toString()];\r\n        }\r\n    };\r\n    return EntityRecognizer;\r\n}());\r\nEntityRecognizer.dateExp = /^\\d{4}-\\d{2}-\\d{2}/i;\r\nEntityRecognizer.yesExp = /^(1|y|yes|yep|sure|ok|true)(\\W|$)/i;\r\nEntityRecognizer.noExp = /^(2|n|no|nope|not|false)(\\W|$)/i;\r\nEntityRecognizer.numberExp = /[+-]?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)/;\r\nEntityRecognizer.ordinalWords = 'first|second|third|fourth|fifth|sixth|seventh|eigth|ninth|tenth';\r\nexports.EntityRecognizer = EntityRecognizer;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/bots/Library.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar SimpleDialog_1 = require(\"../dialogs/SimpleDialog\");\r\nvar ActionSet_1 = require(\"../dialogs/ActionSet\");\r\nvar IntentRecognizerSet_1 = require(\"../dialogs/IntentRecognizerSet\");\r\nvar Session_1 = require(\"../Session\");\r\nvar consts = require(\"../consts\");\r\nvar utils = require(\"../utils\");\r\nvar logger = require(\"../logger\");\r\nvar events_1 = require(\"events\");\r\nvar path = require(\"path\");\r\nvar async = require(\"async\");\r\nvar Library = (function (_super) {\r\n    __extends(Library, _super);\r\n    function Library(name) {\r\n        var _this = _super.call(this) || this;\r\n        _this.name = name;\r\n        _this.dialogs = {};\r\n        _this.libraries = {};\r\n        _this.actions = new ActionSet_1.ActionSet();\r\n        _this.recognizers = new IntentRecognizerSet_1.IntentRecognizerSet();\r\n        _this.triggersAdded = false;\r\n        return _this;\r\n    }\r\n    Library.prototype.clone = function (copyTo, newName) {\r\n        var obj = copyTo || new Library(newName || this.name);\r\n        for (var id in this.dialogs) {\r\n            obj.dialogs[id] = this.dialogs[id];\r\n        }\r\n        for (var name in this.libraries) {\r\n            obj.libraries[name] = this.libraries[name];\r\n        }\r\n        this.actions.clone(obj.actions);\r\n        this.recognizers.clone(obj.recognizers);\r\n        obj._localePath = this._localePath;\r\n        obj._onFindRoutes = this._onFindRoutes;\r\n        obj._onSelectRoute = this._onSelectRoute;\r\n        obj.triggersAdded = this.triggersAdded;\r\n        return obj;\r\n    };\r\n    Library.prototype.localePath = function (path) {\r\n        if (path) {\r\n            this._localePath = path;\r\n        }\r\n        return this._localePath;\r\n    };\r\n    Library.prototype.recognize = function (context, callback) {\r\n        if (this.recognizers.length > 0 && context.libraryName !== this.name) {\r\n            this.recognizers.recognize(context, callback);\r\n        }\r\n        else {\r\n            callback(null, context.intent || { intent: 'None', score: 0.0 });\r\n        }\r\n    };\r\n    Library.prototype.recognizer = function (plugin) {\r\n        this.recognizers.recognizer(plugin);\r\n        return this;\r\n    };\r\n    Library.prototype.findRoutes = function (context, callback) {\r\n        var _this = this;\r\n        if (!this.triggersAdded) {\r\n            this.forEachDialog(function (dialog, id) { return dialog.addDialogTrigger(_this.actions, _this.name + ':' + id); });\r\n            this.triggersAdded = true;\r\n        }\r\n        if (this._onFindRoutes) {\r\n            this._onFindRoutes(context, callback);\r\n        }\r\n        else {\r\n            this.defaultFindRoutes(context, callback);\r\n        }\r\n    };\r\n    Library.prototype.onFindRoutes = function (handler) {\r\n        this._onFindRoutes = handler;\r\n    };\r\n    Library.prototype.selectRoute = function (session, route) {\r\n        if (this._onSelectRoute) {\r\n            this._onSelectRoute(session, route);\r\n        }\r\n        else {\r\n            this.defaultSelectRoute(session, route);\r\n        }\r\n    };\r\n    Library.prototype.onSelectRoute = function (handler) {\r\n        this._onSelectRoute = handler;\r\n    };\r\n    Library.prototype.findActiveDialogRoutes = function (context, callback, dialogStack) {\r\n        var _this = this;\r\n        if (!dialogStack) {\r\n            dialogStack = context.dialogStack();\r\n        }\r\n        var results = Library.addRouteResult({ score: 0.0, libraryName: this.name });\r\n        var entry = Session_1.Session.activeDialogStackEntry(dialogStack);\r\n        var parts = entry ? entry.id.split(':') : null;\r\n        if (parts && parts[0] == this.name) {\r\n            var dialog = this.dialog(parts[1]);\r\n            if (dialog) {\r\n                var ctx = utils.clone(context);\r\n                ctx.libraryName = this.name;\r\n                ctx.dialogData = entry.state;\r\n                ctx.activeDialog = true;\r\n                dialog.recognize(ctx, function (err, result) {\r\n                    if (!err) {\r\n                        if (result.score < 0.1) {\r\n                            result.score = 0.1;\r\n                        }\r\n                        callback(null, Library.addRouteResult({\r\n                            score: result.score,\r\n                            libraryName: _this.name,\r\n                            routeType: Library.RouteTypes.ActiveDialog,\r\n                            routeData: result\r\n                        }, results));\r\n                    }\r\n                    else {\r\n                        callback(err, null);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                logger.warn(ctx, \"Active dialog '%s' not found in library.\", entry.id);\r\n                callback(null, results);\r\n            }\r\n        }\r\n        else {\r\n            callback(null, results);\r\n        }\r\n    };\r\n    Library.prototype.selectActiveDialogRoute = function (session, route, newStack) {\r\n        if (!route || route.libraryName !== this.name || route.routeType !== Library.RouteTypes.ActiveDialog) {\r\n            throw new Error('Invalid route type passed to Library.selectActiveDialogRoute().');\r\n        }\r\n        if (newStack) {\r\n            session.dialogStack(newStack);\r\n        }\r\n        session.routeToActiveDialog(route.routeData);\r\n    };\r\n    Library.prototype.findStackActionRoutes = function (context, callback, dialogStack) {\r\n        var _this = this;\r\n        if (!dialogStack) {\r\n            dialogStack = context.dialogStack();\r\n        }\r\n        var results = Library.addRouteResult({ score: 0.0, libraryName: this.name });\r\n        var ctx = utils.clone(context);\r\n        ctx.libraryName = this.name;\r\n        ctx.routeType = Library.RouteTypes.StackAction;\r\n        async.forEachOf(dialogStack || [], function (entry, index, next) {\r\n            var parts = entry.id.split(':');\r\n            if (parts[0] == _this.name) {\r\n                var dialog = _this.dialog(parts[1]);\r\n                if (dialog) {\r\n                    dialog.findActionRoutes(ctx, function (err, ra) {\r\n                        if (!err) {\r\n                            for (var i = 0; i < ra.length; i++) {\r\n                                var r = ra[i];\r\n                                if (r.routeData) {\r\n                                    r.routeData.dialogId = entry.id;\r\n                                    r.routeData.dialogIndex = index;\r\n                                }\r\n                                results = Library.addRouteResult(r, results);\r\n                            }\r\n                        }\r\n                        next(err);\r\n                    });\r\n                }\r\n                else {\r\n                    logger.warn(ctx, \"Dialog '%s' not found in library.\", entry.id);\r\n                    next(null);\r\n                }\r\n            }\r\n            else {\r\n                next(null);\r\n            }\r\n        }, function (err) {\r\n            if (!err) {\r\n                callback(null, results);\r\n            }\r\n            else {\r\n                callback(err, null);\r\n            }\r\n        });\r\n    };\r\n    Library.prototype.selectStackActionRoute = function (session, route, newStack) {\r\n        if (!route || route.libraryName !== this.name || route.routeType !== Library.RouteTypes.StackAction) {\r\n            throw new Error('Invalid route type passed to Library.selectStackActionRoute().');\r\n        }\r\n        if (newStack) {\r\n            session.dialogStack(newStack);\r\n        }\r\n        var routeData = route.routeData;\r\n        var parts = routeData.dialogId.split(':');\r\n        this.dialog(parts[1]).selectActionRoute(session, route);\r\n    };\r\n    Library.prototype.findGlobalActionRoutes = function (context, callback) {\r\n        var results = Library.addRouteResult({ score: 0.0, libraryName: this.name });\r\n        var ctx = utils.clone(context);\r\n        ctx.libraryName = this.name;\r\n        ctx.routeType = Library.RouteTypes.GlobalAction;\r\n        this.actions.findActionRoutes(ctx, function (err, ra) {\r\n            if (!err) {\r\n                for (var i = 0; i < ra.length; i++) {\r\n                    var r = ra[i];\r\n                    results = Library.addRouteResult(r, results);\r\n                }\r\n                callback(null, results);\r\n            }\r\n            else {\r\n                callback(err, null);\r\n            }\r\n        });\r\n    };\r\n    Library.prototype.selectGlobalActionRoute = function (session, route) {\r\n        if (!route || route.libraryName !== this.name || route.routeType !== Library.RouteTypes.GlobalAction) {\r\n            throw new Error('Invalid route type passed to Library.selectGlobalActionRoute().');\r\n        }\r\n        this.actions.selectActionRoute(session, route);\r\n    };\r\n    Library.prototype.defaultFindRoutes = function (context, callback) {\r\n        var _this = this;\r\n        var results = Library.addRouteResult({ score: 0.0, libraryName: this.name });\r\n        this.recognize(context, function (err, topIntent) {\r\n            if (!err) {\r\n                var ctx = utils.clone(context);\r\n                ctx.intent = topIntent && topIntent.score > 0 ? topIntent : null;\r\n                ctx.libraryName = _this.name;\r\n                async.parallel([\r\n                    function (cb) {\r\n                        _this.findActiveDialogRoutes(ctx, function (err, routes) {\r\n                            if (!err && routes) {\r\n                                routes.forEach(function (r) { return results = Library.addRouteResult(r, results); });\r\n                            }\r\n                            cb(err);\r\n                        });\r\n                    },\r\n                    function (cb) {\r\n                        _this.findStackActionRoutes(ctx, function (err, routes) {\r\n                            if (!err && routes) {\r\n                                routes.forEach(function (r) { return results = Library.addRouteResult(r, results); });\r\n                            }\r\n                            cb(err);\r\n                        });\r\n                    },\r\n                    function (cb) {\r\n                        _this.findGlobalActionRoutes(ctx, function (err, routes) {\r\n                            if (!err && routes) {\r\n                                routes.forEach(function (r) { return results = Library.addRouteResult(r, results); });\r\n                            }\r\n                            cb(err);\r\n                        });\r\n                    }\r\n                ], function (err) {\r\n                    if (!err) {\r\n                        callback(null, results);\r\n                    }\r\n                    else {\r\n                        callback(err, null);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                callback(err, null);\r\n            }\r\n        });\r\n    };\r\n    Library.prototype.defaultSelectRoute = function (session, route) {\r\n        switch (route.routeType || '') {\r\n            case Library.RouteTypes.ActiveDialog:\r\n                this.selectActiveDialogRoute(session, route);\r\n                break;\r\n            case Library.RouteTypes.StackAction:\r\n                this.selectStackActionRoute(session, route);\r\n                break;\r\n            case Library.RouteTypes.GlobalAction:\r\n                this.selectGlobalActionRoute(session, route);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid route type passed to Library.selectRoute().');\r\n        }\r\n    };\r\n    Library.addRouteResult = function (route, current) {\r\n        if (!current || current.length < 1 || route.score > current[0].score) {\r\n            current = [route];\r\n        }\r\n        else if (route.score == current[0].score) {\r\n            current.push(route);\r\n        }\r\n        return current;\r\n    };\r\n    Library.bestRouteResult = function (routes, dialogStack, rootLibraryName) {\r\n        var bestLibrary = rootLibraryName;\r\n        if (dialogStack) {\r\n            dialogStack.forEach(function (entry) {\r\n                var parts = entry.id.split(':');\r\n                for (var i = 0; i < routes.length; i++) {\r\n                    if (routes[i].libraryName == parts[0]) {\r\n                        bestLibrary = parts[0];\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        var best;\r\n        var bestPriority = 5;\r\n        for (var i = 0; i < routes.length; i++) {\r\n            var r = routes[i];\r\n            if (r.score > 0.0) {\r\n                var priority;\r\n                switch (r.routeType) {\r\n                    default:\r\n                        priority = 1;\r\n                        break;\r\n                    case Library.RouteTypes.ActiveDialog:\r\n                        priority = 2;\r\n                        break;\r\n                    case Library.RouteTypes.StackAction:\r\n                        priority = 3;\r\n                        break;\r\n                    case Library.RouteTypes.GlobalAction:\r\n                        priority = 4;\r\n                        break;\r\n                }\r\n                if (priority < bestPriority) {\r\n                    best = r;\r\n                    bestPriority = priority;\r\n                }\r\n                else if (priority == bestPriority) {\r\n                    switch (priority) {\r\n                        case 3:\r\n                            if (r.routeData.dialogIndex > best.routeData.dialogIndex) {\r\n                                best = r;\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            if (bestLibrary && best.libraryName !== bestLibrary && r.libraryName == bestLibrary) {\r\n                                best = r;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return best;\r\n    };\r\n    Library.prototype.dialog = function (id, dialog) {\r\n        var d;\r\n        if (dialog) {\r\n            if (id.indexOf(':') >= 0) {\r\n                id = id.split(':')[1];\r\n            }\r\n            if (this.dialogs.hasOwnProperty(id)) {\r\n                throw new Error(\"Dialog[\" + id + \"] already exists in library[\" + this.name + \"].\");\r\n            }\r\n            if (Array.isArray(dialog)) {\r\n                d = new SimpleDialog_1.SimpleDialog(SimpleDialog_1.createWaterfall(dialog));\r\n            }\r\n            else if (typeof dialog == 'function') {\r\n                d = new SimpleDialog_1.SimpleDialog(SimpleDialog_1.createWaterfall([dialog]));\r\n            }\r\n            else {\r\n                d = dialog;\r\n            }\r\n            this.dialogs[id] = d;\r\n        }\r\n        else if (this.dialogs.hasOwnProperty(id)) {\r\n            d = this.dialogs[id];\r\n        }\r\n        return d;\r\n    };\r\n    Library.prototype.findDialog = function (libName, dialogId) {\r\n        var d;\r\n        var lib = this.library(libName);\r\n        if (lib) {\r\n            d = lib.dialog(dialogId);\r\n        }\r\n        return d;\r\n    };\r\n    Library.prototype.forEachDialog = function (callback) {\r\n        for (var id in this.dialogs) {\r\n            callback(this.dialog(id), id);\r\n        }\r\n    };\r\n    Library.prototype.library = function (lib) {\r\n        var l;\r\n        if (typeof lib === 'string') {\r\n            if (lib == this.name) {\r\n                l = this;\r\n            }\r\n            else if (this.libraries.hasOwnProperty(lib)) {\r\n                l = this.libraries[lib];\r\n            }\r\n            else {\r\n                for (var name in this.libraries) {\r\n                    l = this.libraries[name].library(lib);\r\n                    if (l) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            l = this.libraries[lib.name] = lib;\r\n        }\r\n        return l;\r\n    };\r\n    Library.prototype.forEachLibrary = function (callback) {\r\n        for (var lib in this.libraries) {\r\n            callback(this.libraries[lib]);\r\n        }\r\n    };\r\n    Library.prototype.libraryList = function (reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        var list = [];\r\n        var added = {};\r\n        function addChildren(lib) {\r\n            if (!added.hasOwnProperty(lib.name)) {\r\n                added[lib.name] = true;\r\n                if (!reverse) {\r\n                    list.push(lib);\r\n                }\r\n                lib.forEachLibrary(function (child) { return addChildren(child); });\r\n                if (reverse) {\r\n                    list.push(lib);\r\n                }\r\n            }\r\n        }\r\n        addChildren(this);\r\n        return list;\r\n    };\r\n    Library.prototype.beginDialogAction = function (name, id, options) {\r\n        this.actions.beginDialogAction(name, id, options);\r\n        return this;\r\n    };\r\n    Library.prototype.endConversationAction = function (name, msg, options) {\r\n        this.actions.endConversationAction(name, msg, options);\r\n        return this;\r\n    };\r\n    return Library;\r\n}(events_1.EventEmitter));\r\nLibrary.RouteTypes = {\r\n    GlobalAction: 'GlobalAction',\r\n    StackAction: 'StackAction',\r\n    ActiveDialog: 'ActiveDialog'\r\n};\r\nexports.Library = Library;\r\nexports.systemLib = new Library(consts.Library.system);\r\nexports.systemLib.localePath(path.join(__dirname, '../locale/'));\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/SimpleDialog.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Dialog_1 = require(\"./Dialog\");\r\nvar consts = require(\"../consts\");\r\nvar logger = require(\"../logger\");\r\nvar SimpleDialog = (function (_super) {\r\n    __extends(SimpleDialog, _super);\r\n    function SimpleDialog(fn) {\r\n        var _this = _super.call(this) || this;\r\n        _this.fn = fn;\r\n        return _this;\r\n    }\r\n    SimpleDialog.prototype.begin = function (session, args) {\r\n        this.fn(session, args);\r\n    };\r\n    SimpleDialog.prototype.replyReceived = function (session) {\r\n        this.fn(session);\r\n    };\r\n    SimpleDialog.prototype.dialogResumed = function (session, result) {\r\n        this.fn(session, result);\r\n    };\r\n    return SimpleDialog;\r\n}(Dialog_1.Dialog));\r\nexports.SimpleDialog = SimpleDialog;\r\nfunction createWaterfall(steps) {\r\n    return function waterfallAction(s, r) {\r\n        var skip = function (result) {\r\n            result = result || {};\r\n            if (result.resumed == null) {\r\n                result.resumed = Dialog_1.ResumeReason.forward;\r\n            }\r\n            waterfallAction(s, result);\r\n        };\r\n        if (r && r.hasOwnProperty('resumed')) {\r\n            if (r.resumed !== Dialog_1.ResumeReason.reprompt) {\r\n                var step = s.dialogData[consts.Data.WaterfallStep];\r\n                switch (r.resumed) {\r\n                    case Dialog_1.ResumeReason.back:\r\n                        step -= 1;\r\n                        break;\r\n                    default:\r\n                        step++;\r\n                }\r\n                if (step >= 0 && step < steps.length) {\r\n                    try {\r\n                        logger.info(s, 'waterfall() step %d of %d', step + 1, steps.length);\r\n                        s.dialogData[consts.Data.WaterfallStep] = step;\r\n                        steps[step](s, r, skip);\r\n                    }\r\n                    catch (e) {\r\n                        s.error(e);\r\n                    }\r\n                }\r\n                else {\r\n                    s.endDialogWithResult(r);\r\n                }\r\n            }\r\n        }\r\n        else if (steps && steps.length > 0) {\r\n            try {\r\n                logger.info(s, 'waterfall() step %d of %d', 1, steps.length);\r\n                s.dialogData[consts.Data.WaterfallStep] = 0;\r\n                steps[0](s, r, skip);\r\n            }\r\n            catch (e) {\r\n                s.error(e);\r\n            }\r\n        }\r\n        else {\r\n            logger.warn(s, 'waterfall() empty waterfall detected');\r\n            s.endDialogWithResult({ resumed: Dialog_1.ResumeReason.notCompleted });\r\n        }\r\n    };\r\n}\r\nexports.createWaterfall = createWaterfall;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/IntentRecognizerSet.js":"\"use strict\";\r\nvar utils = require(\"../utils\");\r\nvar async = require(\"async\");\r\nvar RecognizeOrder;\r\n(function (RecognizeOrder) {\r\n    RecognizeOrder[RecognizeOrder[\"parallel\"] = 0] = \"parallel\";\r\n    RecognizeOrder[RecognizeOrder[\"series\"] = 1] = \"series\";\r\n})(RecognizeOrder = exports.RecognizeOrder || (exports.RecognizeOrder = {}));\r\nvar IntentRecognizerSet = (function () {\r\n    function IntentRecognizerSet(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.options = options;\r\n        if (typeof this.options.intentThreshold !== 'number') {\r\n            this.options.intentThreshold = 0.1;\r\n        }\r\n        if (!this.options.hasOwnProperty('recognizeOrder')) {\r\n            this.options.recognizeOrder = RecognizeOrder.parallel;\r\n        }\r\n        if (!this.options.recognizers) {\r\n            this.options.recognizers = [];\r\n        }\r\n        if (!this.options.processLimit) {\r\n            this.options.processLimit = 4;\r\n        }\r\n        if (!this.options.hasOwnProperty('stopIfExactMatch')) {\r\n            this.options.stopIfExactMatch = true;\r\n        }\r\n        this.length = this.options.recognizers.length;\r\n    }\r\n    IntentRecognizerSet.prototype.clone = function (copyTo) {\r\n        var obj = copyTo || new IntentRecognizerSet(utils.clone(this.options));\r\n        obj.options.recognizers = this.options.recognizers.slice(0);\r\n        return obj;\r\n    };\r\n    IntentRecognizerSet.prototype.recognize = function (context, done) {\r\n        if (this.options.recognizeOrder == RecognizeOrder.parallel) {\r\n            this.recognizeInParallel(context, done);\r\n        }\r\n        else {\r\n            this.recognizeInSeries(context, done);\r\n        }\r\n    };\r\n    IntentRecognizerSet.prototype.recognizer = function (plugin) {\r\n        this.options.recognizers.push(plugin);\r\n        this.length++;\r\n        return this;\r\n    };\r\n    IntentRecognizerSet.prototype.recognizeInParallel = function (context, done) {\r\n        var _this = this;\r\n        var result = { score: 0.0, intent: null };\r\n        async.eachLimit(this.options.recognizers, this.options.processLimit, function (recognizer, cb) {\r\n            try {\r\n                recognizer.recognize(context, function (err, r) {\r\n                    if (!err && r && r.score > result.score && r.score >= _this.options.intentThreshold) {\r\n                        result = r;\r\n                    }\r\n                    cb(err);\r\n                });\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }, function (err) {\r\n            if (!err) {\r\n                done(null, result);\r\n            }\r\n            else {\r\n                var msg = err.toString();\r\n                done(err instanceof Error ? err : new Error(msg), null);\r\n            }\r\n        });\r\n    };\r\n    IntentRecognizerSet.prototype.recognizeInSeries = function (context, done) {\r\n        var _this = this;\r\n        var i = 0;\r\n        var result = { score: 0.0, intent: null };\r\n        async.whilst(function () {\r\n            return (i < _this.options.recognizers.length && (result.score < 1.0 || !_this.options.stopIfExactMatch));\r\n        }, function (cb) {\r\n            try {\r\n                var recognizer = _this.options.recognizers[i++];\r\n                recognizer.recognize(context, function (err, r) {\r\n                    if (!err && r && r.score > result.score && r.score >= _this.options.intentThreshold) {\r\n                        result = r;\r\n                    }\r\n                    cb(err);\r\n                });\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }, function (err) {\r\n            if (!err) {\r\n                done(null, result);\r\n            }\r\n            else {\r\n                done(err instanceof Error ? err : new Error(err.toString()), null);\r\n            }\r\n        });\r\n    };\r\n    return IntentRecognizerSet;\r\n}());\r\nexports.IntentRecognizerSet = IntentRecognizerSet;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/Channel.js":"\"use strict\";\r\nexports.channels = {\r\n    facebook: 'facebook',\r\n    skype: 'skype',\r\n    msteams: 'msteams',\r\n    telegram: 'telegram',\r\n    kik: 'kik',\r\n    email: 'email',\r\n    slack: 'slack',\r\n    groupme: 'groupme',\r\n    sms: 'sms',\r\n    emulator: 'emulator',\r\n    directline: 'directline',\r\n    webchat: 'webchat',\r\n    console: 'console'\r\n};\r\nfunction supportsKeyboards(session, buttonCnt) {\r\n    if (buttonCnt === void 0) { buttonCnt = 100; }\r\n    switch (getChannelId(session)) {\r\n        case exports.channels.facebook:\r\n            return (buttonCnt <= 10);\r\n        case exports.channels.kik:\r\n            return (buttonCnt <= 20);\r\n        case exports.channels.slack:\r\n        case exports.channels.telegram:\r\n            return (buttonCnt <= 100);\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nexports.supportsKeyboards = supportsKeyboards;\r\nfunction supportsCardActions(session, buttonCnt) {\r\n    if (buttonCnt === void 0) { buttonCnt = 100; }\r\n    switch (getChannelId(session)) {\r\n        case exports.channels.facebook:\r\n        case exports.channels.skype:\r\n        case exports.channels.msteams:\r\n            return (buttonCnt <= 3);\r\n        case exports.channels.slack:\r\n        case exports.channels.emulator:\r\n        case exports.channels.directline:\r\n        case exports.channels.webchat:\r\n            return (buttonCnt <= 100);\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nexports.supportsCardActions = supportsCardActions;\r\nfunction getChannelId(addressable) {\r\n    var channelId;\r\n    if (addressable) {\r\n        if (addressable.hasOwnProperty('message')) {\r\n            channelId = addressable.message.address.channelId;\r\n        }\r\n        else if (addressable.hasOwnProperty('address')) {\r\n            channelId = addressable.address.channelId;\r\n        }\r\n        else if (addressable.hasOwnProperty('channelId')) {\r\n            channelId = addressable.channelId;\r\n        }\r\n    }\r\n    return channelId ? channelId.toLowerCase() : '';\r\n}\r\nexports.getChannelId = getChannelId;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/DialogAction.js":"\"use strict\";\r\nvar Session_1 = require(\"../Session\");\r\nvar Dialog_1 = require(\"./Dialog\");\r\nvar SimpleDialog_1 = require(\"./SimpleDialog\");\r\nvar consts = require(\"../consts\");\r\nvar utils = require(\"../utils\");\r\nvar DialogAction = (function () {\r\n    function DialogAction() {\r\n    }\r\n    DialogAction.send = function (msg) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        args.splice(0, 0, msg);\r\n        return function sendAction(s) {\r\n            Session_1.Session.prototype.send.apply(s, args);\r\n        };\r\n    };\r\n    DialogAction.beginDialog = function (id, args) {\r\n        return function beginDialogAction(s, a) {\r\n            if (a && a.hasOwnProperty('resumed')) {\r\n                var r = a;\r\n                if (r.error) {\r\n                    s.error(r.error);\r\n                }\r\n            }\r\n            else {\r\n                if (args) {\r\n                    a = a || {};\r\n                    for (var key in args) {\r\n                        if (args.hasOwnProperty(key)) {\r\n                            a[key] = args[key];\r\n                        }\r\n                    }\r\n                }\r\n                s.beginDialog(id, a);\r\n            }\r\n        };\r\n    };\r\n    DialogAction.endDialog = function (result) {\r\n        return function endDialogAction(s) {\r\n            s.endDialog(result);\r\n        };\r\n    };\r\n    DialogAction.validatedPrompt = function (promptType, validator) {\r\n        return new SimpleDialog_1.SimpleDialog(function (s, r) {\r\n            r = r || {};\r\n            var valid = false;\r\n            if (r.response) {\r\n                try {\r\n                    valid = validator(r.response);\r\n                }\r\n                catch (e) {\r\n                    s.error(e);\r\n                }\r\n            }\r\n            var canceled = false;\r\n            switch (r.resumed) {\r\n                case Dialog_1.ResumeReason.canceled:\r\n                case Dialog_1.ResumeReason.forward:\r\n                case Dialog_1.ResumeReason.back:\r\n                    canceled = true;\r\n                    break;\r\n            }\r\n            if (valid || canceled) {\r\n                s.endDialogWithResult(r);\r\n            }\r\n            else if (!s.dialogData.hasOwnProperty('prompt')) {\r\n                s.dialogData = utils.clone(r);\r\n                s.dialogData.promptType = promptType;\r\n                if (!s.dialogData.hasOwnProperty('maxRetries')) {\r\n                    s.dialogData.maxRetries = 2;\r\n                }\r\n                var a = utils.clone(s.dialogData);\r\n                a.maxRetries = 0;\r\n                s.beginDialog(consts.DialogId.Prompts, a);\r\n            }\r\n            else if (s.dialogData.maxRetries > 0) {\r\n                s.dialogData.maxRetries--;\r\n                var a = utils.clone(s.dialogData);\r\n                a.maxRetries = 0;\r\n                a.prompt = s.dialogData.retryPrompt || \"I didn't understand. \" + s.dialogData.prompt;\r\n                s.beginDialog(consts.DialogId.Prompts, a);\r\n            }\r\n            else {\r\n                s.endDialogWithResult({ resumed: Dialog_1.ResumeReason.notCompleted });\r\n            }\r\n        });\r\n    };\r\n    return DialogAction;\r\n}());\r\nexports.DialogAction = DialogAction;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/bots/UniversalBot.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Library_1 = require(\"./Library\");\r\nvar Session_1 = require(\"../Session\");\r\nvar DefaultLocalizer_1 = require(\"../DefaultLocalizer\");\r\nvar BotStorage_1 = require(\"../storage/BotStorage\");\r\nvar consts = require(\"../consts\");\r\nvar utils = require(\"../utils\");\r\nvar async = require(\"async\");\r\nvar UniversalBot = (function (_super) {\r\n    __extends(UniversalBot, _super);\r\n    function UniversalBot(connector, defaultDialog, libraryName) {\r\n        var _this = _super.call(this, libraryName || consts.Library.default) || this;\r\n        _this.settings = {\r\n            processLimit: 4,\r\n            persistUserData: true,\r\n            persistConversationData: false\r\n        };\r\n        _this.connectors = {};\r\n        _this.mwReceive = [];\r\n        _this.mwSend = [];\r\n        _this.mwSession = [];\r\n        _this.localePath('./locale/');\r\n        _this.library(Library_1.systemLib);\r\n        if (defaultDialog) {\r\n            if (typeof defaultDialog === 'function' || Array.isArray(defaultDialog)) {\r\n                _this.dialog('/', defaultDialog);\r\n            }\r\n            else {\r\n                var settings = defaultDialog;\r\n                for (var name in settings) {\r\n                    if (settings.hasOwnProperty(name)) {\r\n                        _this.set(name, settings[name]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (connector) {\r\n            _this.connector(consts.defaultConnector, connector);\r\n        }\r\n        return _this;\r\n    }\r\n    UniversalBot.prototype.clone = function (copyTo, newName) {\r\n        var obj = copyTo || new UniversalBot(null, null, newName || this.name);\r\n        for (var name in this.settings) {\r\n            if (this.settings.hasOwnProperty(name)) {\r\n                this.set(name, this.settings[name]);\r\n            }\r\n        }\r\n        for (var channel in this.connectors) {\r\n            obj.connector(channel, this.connectors[channel]);\r\n        }\r\n        obj.mwReceive = this.mwReceive.slice(0);\r\n        obj.mwSession = this.mwSession.slice(0);\r\n        obj.mwSend = this.mwSend.slice(0);\r\n        return _super.prototype.clone.call(this, obj);\r\n    };\r\n    UniversalBot.prototype.set = function (name, value) {\r\n        this.settings[name] = value;\r\n        if (value && name === 'localizerSettings') {\r\n            var settings = value;\r\n            if (settings.botLocalePath) {\r\n                this.localePath(settings.botLocalePath);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    UniversalBot.prototype.get = function (name) {\r\n        return this.settings[name];\r\n    };\r\n    UniversalBot.prototype.connector = function (channelId, connector) {\r\n        var _this = this;\r\n        var c;\r\n        if (connector) {\r\n            this.connectors[channelId || consts.defaultConnector] = c = connector;\r\n            c.onEvent(function (events, cb) { return _this.receive(events, cb); });\r\n            var asStorage = connector;\r\n            if (!this.settings.storage &&\r\n                typeof asStorage.getData === 'function' &&\r\n                typeof asStorage.saveData === 'function') {\r\n                this.settings.storage = asStorage;\r\n            }\r\n        }\r\n        else if (this.connectors.hasOwnProperty(channelId)) {\r\n            c = this.connectors[channelId];\r\n        }\r\n        else if (this.connectors.hasOwnProperty(consts.defaultConnector)) {\r\n            c = this.connectors[consts.defaultConnector];\r\n        }\r\n        return c;\r\n    };\r\n    UniversalBot.prototype.use = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        args.forEach(function (mw) {\r\n            var added = 0;\r\n            if (mw.receive) {\r\n                Array.prototype.push.apply(_this.mwReceive, Array.isArray(mw.receive) ? mw.receive : [mw.receive]);\r\n                added++;\r\n            }\r\n            if (mw.send) {\r\n                Array.prototype.push.apply(_this.mwSend, Array.isArray(mw.send) ? mw.send : [mw.send]);\r\n                added++;\r\n            }\r\n            if (mw.botbuilder) {\r\n                Array.prototype.push.apply(_this.mwSession, Array.isArray(mw.botbuilder) ? mw.botbuilder : [mw.botbuilder]);\r\n                added++;\r\n            }\r\n            if (added < 1) {\r\n                console.warn('UniversalBot.use: no compatible middleware hook found to install.');\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    UniversalBot.prototype.receive = function (events, done) {\r\n        var _this = this;\r\n        var list = Array.isArray(events) ? events : [events];\r\n        async.eachLimit(list, this.settings.processLimit, function (message, cb) {\r\n            message.agent = consts.agent;\r\n            message.type = message.type || consts.messageType;\r\n            _this.lookupUser(message.address, function (user) {\r\n                if (user) {\r\n                    message.user = user;\r\n                }\r\n                _this.emit('receive', message);\r\n                _this.eventMiddleware(message, _this.mwReceive, function () {\r\n                    if (_this.isMessage(message)) {\r\n                        _this.emit('incoming', message);\r\n                        var userId = message.user.id;\r\n                        var conversationId = message.address.conversation ? message.address.conversation.id : null;\r\n                        var storageCtx = {\r\n                            userId: userId,\r\n                            conversationId: conversationId,\r\n                            address: message.address,\r\n                            persistUserData: _this.settings.persistUserData,\r\n                            persistConversationData: _this.settings.persistConversationData\r\n                        };\r\n                        _this.dispatch(storageCtx, message, _this.settings.defaultDialogId || '/', _this.settings.defaultDialogArgs, cb);\r\n                    }\r\n                    else {\r\n                        _this.emit(message.type, message);\r\n                        cb(null);\r\n                    }\r\n                }, cb);\r\n            }, cb);\r\n        }, this.errorLogger(done));\r\n    };\r\n    UniversalBot.prototype.beginDialog = function (address, dialogId, dialogArgs, done) {\r\n        var _this = this;\r\n        this.lookupUser(address, function (user) {\r\n            var msg = {\r\n                type: consts.messageType,\r\n                agent: consts.agent,\r\n                source: address.channelId,\r\n                sourceEvent: {},\r\n                address: utils.clone(address),\r\n                text: '',\r\n                user: user\r\n            };\r\n            _this.ensureConversation(msg.address, function (adr) {\r\n                msg.address = adr;\r\n                var conversationId = msg.address.conversation ? msg.address.conversation.id : null;\r\n                var storageCtx = {\r\n                    userId: msg.user.id,\r\n                    conversationId: conversationId,\r\n                    address: msg.address,\r\n                    persistUserData: _this.settings.persistUserData,\r\n                    persistConversationData: _this.settings.persistConversationData\r\n                };\r\n                _this.dispatch(storageCtx, msg, dialogId, dialogArgs, _this.errorLogger(done), true);\r\n            }, _this.errorLogger(done));\r\n        }, this.errorLogger(done));\r\n    };\r\n    UniversalBot.prototype.send = function (messages, done) {\r\n        var _this = this;\r\n        var list;\r\n        if (Array.isArray(messages)) {\r\n            list = messages;\r\n        }\r\n        else if (messages.toMessage) {\r\n            list = [messages.toMessage()];\r\n        }\r\n        else {\r\n            list = [messages];\r\n        }\r\n        async.eachLimit(list, this.settings.processLimit, function (message, cb) {\r\n            _this.ensureConversation(message.address, function (adr) {\r\n                message.address = adr;\r\n                _this.emit('send', message);\r\n                _this.eventMiddleware(message, _this.mwSend, function () {\r\n                    _this.emit('outgoing', message);\r\n                    cb(null);\r\n                }, cb);\r\n            }, cb);\r\n        }, this.errorLogger(function (err) {\r\n            if (!err) {\r\n                _this.tryCatch(function () {\r\n                    var channelId = list[0].address.channelId;\r\n                    var connector = _this.connector(channelId);\r\n                    if (!connector) {\r\n                        throw new Error(\"Invalid channelId='\" + channelId + \"'\");\r\n                    }\r\n                    connector.send(list, _this.errorLogger(done));\r\n                }, _this.errorLogger(done));\r\n            }\r\n            else if (done) {\r\n                done(null);\r\n            }\r\n        }));\r\n    };\r\n    UniversalBot.prototype.isInConversation = function (address, cb) {\r\n        var _this = this;\r\n        this.lookupUser(address, function (user) {\r\n            var conversationId = address.conversation ? address.conversation.id : null;\r\n            var storageCtx = {\r\n                userId: user.id,\r\n                conversationId: conversationId,\r\n                address: address,\r\n                persistUserData: false,\r\n                persistConversationData: false\r\n            };\r\n            _this.getStorageData(storageCtx, function (data) {\r\n                var lastAccess;\r\n                if (data && data.privateConversationData && data.privateConversationData.hasOwnProperty(consts.Data.SessionState)) {\r\n                    var ss = data.privateConversationData[consts.Data.SessionState];\r\n                    if (ss && ss.lastAccess) {\r\n                        lastAccess = new Date(ss.lastAccess);\r\n                    }\r\n                }\r\n                cb(null, lastAccess);\r\n            }, _this.errorLogger(cb));\r\n        }, this.errorLogger(cb));\r\n    };\r\n    UniversalBot.prototype.onDisambiguateRoute = function (handler) {\r\n        this._onDisambiguateRoute = handler;\r\n    };\r\n    UniversalBot.prototype.loadSession = function (address, done) {\r\n        var _this = this;\r\n        this.lookupUser(address, function (user) {\r\n            var msg = {\r\n                type: consts.messageType,\r\n                agent: consts.agent,\r\n                source: address.channelId,\r\n                sourceEvent: {},\r\n                address: utils.clone(address),\r\n                text: '',\r\n                user: user\r\n            };\r\n            _this.ensureConversation(msg.address, function (adr) {\r\n                msg.address = adr;\r\n                var conversationId = msg.address.conversation ? msg.address.conversation.id : null;\r\n                var storageCtx = {\r\n                    userId: msg.user.id,\r\n                    conversationId: conversationId,\r\n                    address: msg.address,\r\n                    persistUserData: _this.settings.persistUserData,\r\n                    persistConversationData: _this.settings.persistConversationData\r\n                };\r\n                _this.createSession(storageCtx, msg, _this.settings.defaultDialogId || '/', _this.settings.defaultDialogArgs, done);\r\n            }, _this.errorLogger(done));\r\n        }, this.errorLogger(done));\r\n    };\r\n    UniversalBot.prototype.dispatch = function (storageCtx, message, dialogId, dialogArgs, done, newStack) {\r\n        var _this = this;\r\n        if (newStack === void 0) { newStack = false; }\r\n        this.createSession(storageCtx, message, dialogId, dialogArgs, function (err, session) {\r\n            if (!err) {\r\n                _this.emit('routing', session);\r\n                _this.routeMessage(session, done);\r\n            }\r\n            else {\r\n                done(err);\r\n            }\r\n        }, newStack);\r\n    };\r\n    UniversalBot.prototype.createSession = function (storageCtx, message, dialogId, dialogArgs, done, newStack) {\r\n        var _this = this;\r\n        if (newStack === void 0) { newStack = false; }\r\n        var loadedData;\r\n        this.getStorageData(storageCtx, function (data) {\r\n            if (!_this.localizer) {\r\n                var defaultLocale = _this.settings.localizerSettings ? _this.settings.localizerSettings.defaultLocale : null;\r\n                _this.localizer = new DefaultLocalizer_1.DefaultLocalizer(_this, defaultLocale);\r\n            }\r\n            var session = new Session_1.Session({\r\n                localizer: _this.localizer,\r\n                autoBatchDelay: _this.settings.autoBatchDelay,\r\n                library: _this,\r\n                middleware: _this.mwSession,\r\n                dialogId: dialogId,\r\n                dialogArgs: dialogArgs,\r\n                dialogErrorMessage: _this.settings.dialogErrorMessage,\r\n                onSave: function (cb) {\r\n                    var finish = _this.errorLogger(cb);\r\n                    loadedData.userData = utils.clone(session.userData);\r\n                    loadedData.conversationData = utils.clone(session.conversationData);\r\n                    loadedData.privateConversationData = utils.clone(session.privateConversationData);\r\n                    loadedData.privateConversationData[consts.Data.SessionState] = session.sessionState;\r\n                    _this.saveStorageData(storageCtx, loadedData, finish, finish);\r\n                },\r\n                onSend: function (messages, cb) {\r\n                    _this.send(messages, cb);\r\n                }\r\n            });\r\n            session.on('error', function (err) { return _this.emitError(err); });\r\n            var sessionState;\r\n            session.userData = data.userData || {};\r\n            session.conversationData = data.conversationData || {};\r\n            session.privateConversationData = data.privateConversationData || {};\r\n            if (session.privateConversationData.hasOwnProperty(consts.Data.SessionState)) {\r\n                sessionState = newStack ? null : session.privateConversationData[consts.Data.SessionState];\r\n                delete session.privateConversationData[consts.Data.SessionState];\r\n            }\r\n            loadedData = data;\r\n            session.dispatch(sessionState, message, function () { return done(null, session); });\r\n        }, done);\r\n    };\r\n    UniversalBot.prototype.routeMessage = function (session, done) {\r\n        var _this = this;\r\n        var context = session.toRecognizeContext();\r\n        this.recognize(context, function (err, topIntent) {\r\n            if (session.message.entities) {\r\n                session.message.entities.forEach(function (entity) {\r\n                    if (entity.type === consts.intentEntityType &&\r\n                        entity.score > topIntent.score) {\r\n                        topIntent = entity;\r\n                    }\r\n                });\r\n            }\r\n            context.intent = topIntent;\r\n            context.libraryName = _this.name;\r\n            var results = Library_1.Library.addRouteResult({ score: 0.0, libraryName: _this.name });\r\n            async.each(_this.libraryList(), function (lib, cb) {\r\n                lib.findRoutes(context, function (err, routes) {\r\n                    if (!err && routes) {\r\n                        routes.forEach(function (r) { return results = Library_1.Library.addRouteResult(r, results); });\r\n                    }\r\n                    cb(err);\r\n                });\r\n            }, function (err) {\r\n                if (!err) {\r\n                    var disambiguateRoute = function (session, routes) {\r\n                        var route = Library_1.Library.bestRouteResult(results, session.dialogStack(), _this.name);\r\n                        if (route) {\r\n                            _this.library(route.libraryName).selectRoute(session, route);\r\n                        }\r\n                        else {\r\n                            session.routeToActiveDialog();\r\n                        }\r\n                    };\r\n                    if (_this._onDisambiguateRoute) {\r\n                        disambiguateRoute = _this._onDisambiguateRoute;\r\n                    }\r\n                    disambiguateRoute(session, results);\r\n                    done(null);\r\n                }\r\n                else {\r\n                    session.error(err);\r\n                    done(err);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    UniversalBot.prototype.eventMiddleware = function (event, middleware, done, error) {\r\n        var i = -1;\r\n        var _that = this;\r\n        function next() {\r\n            if (++i < middleware.length) {\r\n                _that.tryCatch(function () {\r\n                    middleware[i](event, next);\r\n                }, function () { return next(); });\r\n            }\r\n            else {\r\n                _that.tryCatch(function () { return done(); }, error);\r\n            }\r\n        }\r\n        next();\r\n    };\r\n    UniversalBot.prototype.isMessage = function (message) {\r\n        return (message && message.type && message.type.toLowerCase() == consts.messageType);\r\n    };\r\n    UniversalBot.prototype.ensureConversation = function (address, done, error) {\r\n        var _this = this;\r\n        this.tryCatch(function () {\r\n            if (!address.conversation) {\r\n                var connector = _this.connector(address.channelId);\r\n                if (!connector) {\r\n                    throw new Error(\"Invalid channelId='\" + address.channelId + \"'\");\r\n                }\r\n                connector.startConversation(address, function (err, adr) {\r\n                    if (!err) {\r\n                        _this.tryCatch(function () { return done(adr); }, error);\r\n                    }\r\n                    else if (error) {\r\n                        error(err);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                _this.tryCatch(function () { return done(address); }, error);\r\n            }\r\n        }, error);\r\n    };\r\n    UniversalBot.prototype.lookupUser = function (address, done, error) {\r\n        var _this = this;\r\n        this.tryCatch(function () {\r\n            _this.emit('lookupUser', address);\r\n            if (_this.settings.lookupUser) {\r\n                _this.settings.lookupUser(address, function (err, user) {\r\n                    if (!err) {\r\n                        _this.tryCatch(function () { return done(user || address.user); }, error);\r\n                    }\r\n                    else if (error) {\r\n                        error(err);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                _this.tryCatch(function () { return done(address.user); }, error);\r\n            }\r\n        }, error);\r\n    };\r\n    UniversalBot.prototype.getStorageData = function (storageCtx, done, error) {\r\n        var _this = this;\r\n        this.tryCatch(function () {\r\n            _this.emit('getStorageData', storageCtx);\r\n            var storage = _this.getStorage();\r\n            storage.getData(storageCtx, function (err, data) {\r\n                if (!err) {\r\n                    _this.tryCatch(function () { return done(data || {}); }, error);\r\n                }\r\n                else if (error) {\r\n                    error(err);\r\n                }\r\n            });\r\n        }, error);\r\n    };\r\n    UniversalBot.prototype.saveStorageData = function (storageCtx, data, done, error) {\r\n        var _this = this;\r\n        this.tryCatch(function () {\r\n            _this.emit('saveStorageData', storageCtx);\r\n            var storage = _this.getStorage();\r\n            storage.saveData(storageCtx, data, function (err) {\r\n                if (!err) {\r\n                    if (done) {\r\n                        _this.tryCatch(function () { return done(); }, error);\r\n                    }\r\n                }\r\n                else if (error) {\r\n                    error(err);\r\n                }\r\n            });\r\n        }, error);\r\n    };\r\n    UniversalBot.prototype.getStorage = function () {\r\n        if (!this.settings.storage) {\r\n            this.settings.storage = new BotStorage_1.MemoryBotStorage();\r\n        }\r\n        return this.settings.storage;\r\n    };\r\n    UniversalBot.prototype.tryCatch = function (fn, error) {\r\n        try {\r\n            fn();\r\n        }\r\n        catch (e) {\r\n            try {\r\n                if (error) {\r\n                    error(e);\r\n                }\r\n            }\r\n            catch (e2) {\r\n                this.emitError(e2);\r\n            }\r\n        }\r\n    };\r\n    UniversalBot.prototype.errorLogger = function (done) {\r\n        var _this = this;\r\n        return function (err) {\r\n            if (err) {\r\n                _this.emitError(err);\r\n            }\r\n            if (done) {\r\n                done(err);\r\n                done = null;\r\n            }\r\n        };\r\n    };\r\n    UniversalBot.prototype.emitError = function (err) {\r\n        var m = err.toString();\r\n        var e = err instanceof Error ? err : new Error(m);\r\n        if (this.listenerCount('error') > 0) {\r\n            this.emit('error', e);\r\n        }\r\n        else {\r\n            console.error(e.stack);\r\n        }\r\n    };\r\n    return UniversalBot;\r\n}(Library_1.Library));\r\nexports.UniversalBot = UniversalBot;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/DefaultLocalizer.js":"\"use strict\";\r\nvar logger = require(\"./logger\");\r\nvar consts = require(\"./consts\");\r\nvar fs = require(\"fs\");\r\nvar async = require(\"async\");\r\nvar Promise = require(\"promise\");\r\nvar path = require(\"path\");\r\nvar DefaultLocalizer = (function () {\r\n    function DefaultLocalizer(root, defaultLocale) {\r\n        this.localePaths = [];\r\n        this.locales = {};\r\n        this.defaultLocale(defaultLocale || 'en');\r\n        var libsSeen = {};\r\n        var _that = this;\r\n        function addPaths(library) {\r\n            if (!libsSeen.hasOwnProperty(library.name)) {\r\n                libsSeen[library.name] = true;\r\n                library.forEachLibrary(function (child) {\r\n                    addPaths(child);\r\n                });\r\n                var path = library.localePath();\r\n                if (path) {\r\n                    _that.localePaths.push(path);\r\n                }\r\n            }\r\n        }\r\n        addPaths(root);\r\n    }\r\n    DefaultLocalizer.prototype.defaultLocale = function (locale) {\r\n        if (locale) {\r\n            this._defaultLocale = locale;\r\n        }\r\n        else {\r\n            return this._defaultLocale;\r\n        }\r\n    };\r\n    DefaultLocalizer.prototype.load = function (locale, done) {\r\n        var _this = this;\r\n        logger.debug(\"localizer.load(%s)\", locale);\r\n        locale = locale ? locale : this._defaultLocale;\r\n        var fbDefault = this.getFallback(this._defaultLocale);\r\n        var fbLocale = this.getFallback(locale);\r\n        var locales = ['en'];\r\n        if (fbDefault !== 'en') {\r\n            locales.push(fbDefault);\r\n        }\r\n        if (this._defaultLocale !== fbDefault) {\r\n            locales.push(this._defaultLocale);\r\n        }\r\n        if (fbLocale !== fbDefault) {\r\n            locales.push(fbLocale);\r\n        }\r\n        if (locale !== fbLocale && locale !== this._defaultLocale) {\r\n            locales.push(locale);\r\n        }\r\n        async.each(locales, function (locale, cb) {\r\n            _this.loadLocale(locale).done(function () { return cb(); }, function (err) { return cb(err); });\r\n        }, function (err) {\r\n            if (done) {\r\n                done(err);\r\n            }\r\n        });\r\n    };\r\n    DefaultLocalizer.prototype.trygettext = function (locale, msgid, ns) {\r\n        locale = locale ? locale : this._defaultLocale;\r\n        var fbDefault = this.getFallback(this._defaultLocale);\r\n        var fbLocale = this.getFallback(locale);\r\n        ns = ns ? ns.toLocaleLowerCase() : null;\r\n        var key = this.createKey(ns, msgid);\r\n        var text = this.getEntry(locale, key);\r\n        if (!text && fbLocale !== locale) {\r\n            text = this.getEntry(fbLocale, key);\r\n        }\r\n        if (!text && this._defaultLocale !== locale) {\r\n            text = this.getEntry(this._defaultLocale, key);\r\n        }\r\n        if (!text && fbDefault !== this._defaultLocale) {\r\n            text = this.getEntry(fbDefault, key);\r\n        }\r\n        if (!text && fbDefault !== 'en') {\r\n            text = this.getEntry('en', key);\r\n        }\r\n        return text ? this.getValue(text) : null;\r\n    };\r\n    DefaultLocalizer.prototype.gettext = function (locale, msgid, ns) {\r\n        return this.trygettext(locale, msgid, ns) || msgid;\r\n    };\r\n    DefaultLocalizer.prototype.ngettext = function (locale, msgid, msgid_plural, count, ns) {\r\n        return count == 1 ? this.gettext(locale, msgid, ns) : this.gettext(locale, msgid_plural, ns);\r\n    };\r\n    DefaultLocalizer.prototype.getFallback = function (locale) {\r\n        if (locale) {\r\n            var split = locale.indexOf(\"-\");\r\n            if (split != -1) {\r\n                return locale.substring(0, split);\r\n            }\r\n        }\r\n        return this.defaultLocale();\r\n    };\r\n    DefaultLocalizer.prototype.loadLocale = function (locale) {\r\n        var _this = this;\r\n        if (!this.locales.hasOwnProperty(locale)) {\r\n            var entry;\r\n            this.locales[locale] = entry = { loaded: null, entries: {} };\r\n            entry.loaded = new Promise(function (resolve, reject) {\r\n                async.eachSeries(_this.localePaths, function (path, cb) {\r\n                    _this.loadLocalePath(locale, path).done(function () { return cb(); }, function (err) { return cb(err); });\r\n                }, function (err) {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(true);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return this.locales[locale].loaded;\r\n    };\r\n    DefaultLocalizer.prototype.loadLocalePath = function (locale, localePath) {\r\n        var _this = this;\r\n        var dir = path.join(localePath, locale);\r\n        var entryCount = 0;\r\n        var p = new Promise(function (resolve, reject) {\r\n            var access = Promise.denodeify(fs.access);\r\n            var readdir = Promise.denodeify(fs.readdir);\r\n            var asyncEach = Promise.denodeify(async.each);\r\n            access(dir)\r\n                .then(function () {\r\n                return readdir(dir);\r\n            })\r\n                .then(function (files) {\r\n                return asyncEach(files, function (file, cb) {\r\n                    if (file.substring(file.length - 5).toLowerCase() == \".json\") {\r\n                        logger.debug(\"localizer.load(%s) - Loading %s/%s\", locale, dir, file);\r\n                        _this.parseFile(locale, dir, file)\r\n                            .then(function (count) {\r\n                            entryCount += count;\r\n                            cb();\r\n                        }, function (err) {\r\n                            logger.error(\"localizer.load(%s) - Error reading %s/%s: %s\", locale, dir, file, err.toString());\r\n                            cb();\r\n                        });\r\n                    }\r\n                    else {\r\n                        cb();\r\n                    }\r\n                });\r\n            })\r\n                .then(function () {\r\n                resolve(entryCount);\r\n            }, function (err) {\r\n                if (err.code === 'ENOENT') {\r\n                    logger.debug(\"localizer.load(%s) - Couldn't find directory: %s\", locale, dir);\r\n                    resolve(-1);\r\n                }\r\n                else {\r\n                    logger.error('localizer.load(%s) - Error: %s', locale, err.toString());\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n        return p;\r\n    };\r\n    DefaultLocalizer.prototype.parseFile = function (locale, localeDir, filename) {\r\n        var _this = this;\r\n        var table = this.locales[locale];\r\n        return new Promise(function (resolve, reject) {\r\n            var filePath = path.join(localeDir, filename);\r\n            var readFile = Promise.denodeify(fs.readFile);\r\n            readFile(filePath, 'utf8')\r\n                .then(function (data) {\r\n                var ns = path.parse(filename).name.toLocaleLowerCase();\r\n                if (ns == 'index') {\r\n                    ns = null;\r\n                }\r\n                try {\r\n                    var cnt = 0;\r\n                    var entries = JSON.parse(data);\r\n                    for (var key in entries) {\r\n                        var k = _this.createKey(ns, key);\r\n                        table.entries[k] = entries[key];\r\n                        ++cnt;\r\n                    }\r\n                    resolve(cnt);\r\n                }\r\n                catch (error) {\r\n                    return reject(error);\r\n                }\r\n            }, function (err) {\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    DefaultLocalizer.prototype.createKey = function (ns, msgid) {\r\n        var escapedMsgId = this.escapeKey(msgid);\r\n        var prepend = \"\";\r\n        if (ns && ns !== consts.Library.default) {\r\n            prepend = ns + \":\";\r\n        }\r\n        return prepend + msgid;\r\n    };\r\n    DefaultLocalizer.prototype.escapeKey = function (key) {\r\n        return key.replace(/:/g, \"--\").toLowerCase();\r\n    };\r\n    DefaultLocalizer.prototype.getEntry = function (locale, key) {\r\n        return this.locales.hasOwnProperty(locale) && this.locales[locale].entries.hasOwnProperty(key) ? this.locales[locale].entries[key] : null;\r\n    };\r\n    DefaultLocalizer.prototype.getValue = function (text) {\r\n        return typeof text == \"string\" ? text : this.randomizeValue(text);\r\n    };\r\n    DefaultLocalizer.prototype.randomizeValue = function (a) {\r\n        var i = Math.floor(Math.random() * a.length);\r\n        return this.getValue(a[i]);\r\n    };\r\n    return DefaultLocalizer;\r\n}());\r\nexports.DefaultLocalizer = DefaultLocalizer;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/storage/BotStorage.js":"\"use strict\";\r\nvar MemoryBotStorage = (function () {\r\n    function MemoryBotStorage() {\r\n        this.userStore = {};\r\n        this.conversationStore = {};\r\n    }\r\n    MemoryBotStorage.prototype.getData = function (context, callback) {\r\n        var data = {};\r\n        if (context.userId) {\r\n            if (context.persistUserData) {\r\n                if (this.userStore.hasOwnProperty(context.userId)) {\r\n                    data.userData = JSON.parse(this.userStore[context.userId]);\r\n                }\r\n                else {\r\n                    data.userData = null;\r\n                }\r\n            }\r\n            if (context.conversationId) {\r\n                var key = context.userId + ':' + context.conversationId;\r\n                if (this.conversationStore.hasOwnProperty(key)) {\r\n                    data.privateConversationData = JSON.parse(this.conversationStore[key]);\r\n                }\r\n                else {\r\n                    data.privateConversationData = null;\r\n                }\r\n            }\r\n        }\r\n        if (context.persistConversationData && context.conversationId) {\r\n            if (this.conversationStore.hasOwnProperty(context.conversationId)) {\r\n                data.conversationData = JSON.parse(this.conversationStore[context.conversationId]);\r\n            }\r\n            else {\r\n                data.conversationData = null;\r\n            }\r\n        }\r\n        callback(null, data);\r\n    };\r\n    MemoryBotStorage.prototype.saveData = function (context, data, callback) {\r\n        if (context.userId) {\r\n            if (context.persistUserData) {\r\n                this.userStore[context.userId] = JSON.stringify(data.userData || {});\r\n            }\r\n            if (context.conversationId) {\r\n                var key = context.userId + ':' + context.conversationId;\r\n                this.conversationStore[key] = JSON.stringify(data.privateConversationData || {});\r\n            }\r\n        }\r\n        if (context.persistConversationData && context.conversationId) {\r\n            this.conversationStore[context.conversationId] = JSON.stringify(data.conversationData || {});\r\n        }\r\n        callback(null);\r\n    };\r\n    MemoryBotStorage.prototype.deleteData = function (context) {\r\n        if (context.userId && this.userStore.hasOwnProperty(context.userId)) {\r\n            if (context.conversationId) {\r\n                if (this.conversationStore.hasOwnProperty(context.conversationId)) {\r\n                    delete this.conversationStore[context.conversationId];\r\n                }\r\n            }\r\n            else {\r\n                delete this.userStore[context.userId];\r\n                for (var key in this.conversationStore) {\r\n                    if (key.indexOf(context.userId + ':') == 0) {\r\n                        delete this.conversationStore[key];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return MemoryBotStorage;\r\n}());\r\nexports.MemoryBotStorage = MemoryBotStorage;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/bots/ChatConnector.js":"\"use strict\";\r\nvar OpenIdMetadata_1 = require(\"./OpenIdMetadata\");\r\nvar utils = require(\"../utils\");\r\nvar logger = require(\"../logger\");\r\nvar consts = require(\"../consts\");\r\nvar request = require(\"request\");\r\nvar async = require(\"async\");\r\nvar jwt = require(\"jsonwebtoken\");\r\nvar zlib = require(\"zlib\");\r\nvar urlJoin = require(\"url-join\");\r\nvar pjson = require('../../package.json');\r\nvar MAX_DATA_LENGTH = 65000;\r\nvar USER_AGENT = \"Microsoft-BotFramework/3.1 (BotBuilder Node.js/\" + pjson.version + \")\";\r\nvar ChatConnector = (function () {\r\n    function ChatConnector(settings) {\r\n        if (settings === void 0) { settings = {}; }\r\n        this.settings = settings;\r\n        if (!this.settings.endpoint) {\r\n            this.settings.endpoint = {\r\n                refreshEndpoint: 'https://login.microsoftonline.com/botframework.com/oauth2/v2.0/token',\r\n                refreshScope: 'https://api.botframework.com/.default',\r\n                botConnectorOpenIdMetadata: this.settings.openIdMetadata || 'https://login.botframework.com/v1/.well-known/openidconfiguration',\r\n                botConnectorIssuer: 'https://api.botframework.com',\r\n                botConnectorAudience: this.settings.appId,\r\n                msaOpenIdMetadata: 'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration',\r\n                msaIssuer: 'https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/',\r\n                msaAudience: 'https://graph.microsoft.com',\r\n                emulatorOpenIdMetadata: 'https://login.microsoftonline.com/botframework.com/v2.0/.well-known/openid-configuration',\r\n                emulatorAudience: 'https://sts.windows.net/d6d49420-f39b-4df7-a1dc-d59a935871db/',\r\n                emulatorIssuer: this.settings.appId,\r\n                stateEndpoint: this.settings.stateEndpoint || 'https://state.botframework.com'\r\n            };\r\n        }\r\n        this.botConnectorOpenIdMetadata = new OpenIdMetadata_1.OpenIdMetadata(this.settings.endpoint.botConnectorOpenIdMetadata);\r\n        this.msaOpenIdMetadata = new OpenIdMetadata_1.OpenIdMetadata(this.settings.endpoint.msaOpenIdMetadata);\r\n        this.emulatorOpenIdMetadata = new OpenIdMetadata_1.OpenIdMetadata(this.settings.endpoint.emulatorOpenIdMetadata);\r\n    }\r\n    ChatConnector.prototype.listen = function () {\r\n        var _this = this;\r\n        return function (req, res) {\r\n            if (req.body) {\r\n                _this.verifyBotFramework(req, res);\r\n            }\r\n            else {\r\n                var requestData = '';\r\n                req.on('data', function (chunk) {\r\n                    requestData += chunk;\r\n                });\r\n                req.on('end', function () {\r\n                    req.body = JSON.parse(requestData);\r\n                    _this.verifyBotFramework(req, res);\r\n                });\r\n            }\r\n        };\r\n    };\r\n    ChatConnector.prototype.verifyBotFramework = function (req, res) {\r\n        var _this = this;\r\n        var token;\r\n        var isEmulator = req.body['channelId'] === 'emulator';\r\n        var authHeaderValue = req.headers ? req.headers['authorization'] || req.headers['Authorization'] : null;\r\n        if (authHeaderValue) {\r\n            var auth = authHeaderValue.trim().split(' ');\r\n            if (auth.length == 2 && auth[0].toLowerCase() == 'bearer') {\r\n                token = auth[1];\r\n            }\r\n        }\r\n        if (token) {\r\n            req.body['useAuth'] = true;\r\n            var decoded = jwt.decode(token, { complete: true });\r\n            var verifyOptions;\r\n            var openIdMetadata;\r\n            if (isEmulator && decoded.payload.iss == this.settings.endpoint.msaIssuer) {\r\n                openIdMetadata = this.msaOpenIdMetadata;\r\n                verifyOptions = {\r\n                    issuer: this.settings.endpoint.msaIssuer,\r\n                    audience: this.settings.endpoint.msaAudience,\r\n                    clockTolerance: 300\r\n                };\r\n            }\r\n            else if (isEmulator && decoded.payload.iss == this.settings.endpoint.emulatorIssuer) {\r\n                openIdMetadata = this.emulatorOpenIdMetadata;\r\n                verifyOptions = {\r\n                    issuer: this.settings.endpoint.emulatorIssuer,\r\n                    audience: this.settings.endpoint.emulatorAudience,\r\n                    clockTolerance: 300\r\n                };\r\n            }\r\n            else {\r\n                openIdMetadata = this.botConnectorOpenIdMetadata;\r\n                verifyOptions = {\r\n                    issuer: this.settings.endpoint.botConnectorIssuer,\r\n                    audience: this.settings.endpoint.botConnectorAudience,\r\n                    clockTolerance: 300\r\n                };\r\n            }\r\n            if (isEmulator && decoded.payload.appid != this.settings.appId) {\r\n                logger.error('ChatConnector: receive - invalid token. Requested by unexpected app ID.');\r\n                res.status(403);\r\n                res.end();\r\n                return;\r\n            }\r\n            openIdMetadata.getKey(decoded.header.kid, function (key) {\r\n                if (key) {\r\n                    try {\r\n                        jwt.verify(token, key, verifyOptions);\r\n                    }\r\n                    catch (err) {\r\n                        logger.error('ChatConnector: receive - invalid token. Check bot\\'s app ID & Password.');\r\n                        res.status(403);\r\n                        res.end();\r\n                        return;\r\n                    }\r\n                    _this.dispatch(req.body, res);\r\n                }\r\n                else {\r\n                    logger.error('ChatConnector: receive - invalid signing key or OpenId metadata document.');\r\n                    res.status(500);\r\n                    res.end();\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        else if (isEmulator && !this.settings.appId && !this.settings.appPassword) {\r\n            logger.warn(req.body, 'ChatConnector: receive - emulator running without security enabled.');\r\n            req.body['useAuth'] = false;\r\n            this.dispatch(req.body, res);\r\n        }\r\n        else {\r\n            logger.error('ChatConnector: receive - no security token sent.');\r\n            res.status(401);\r\n            res.end();\r\n        }\r\n    };\r\n    ChatConnector.prototype.onEvent = function (handler) {\r\n        this.onEventHandler = handler;\r\n    };\r\n    ChatConnector.prototype.onInvoke = function (handler) {\r\n        this.onInvokeHandler = handler;\r\n    };\r\n    ChatConnector.prototype.send = function (messages, done) {\r\n        var _this = this;\r\n        async.eachSeries(messages, function (msg, cb) {\r\n            try {\r\n                if (msg.address && msg.address.serviceUrl) {\r\n                    _this.postMessage(msg, cb);\r\n                }\r\n                else {\r\n                    logger.error('ChatConnector: send - message is missing address or serviceUrl.');\r\n                    cb(new Error('Message missing address or serviceUrl.'));\r\n                }\r\n            }\r\n            catch (e) {\r\n                cb(e);\r\n            }\r\n        }, done);\r\n    };\r\n    ChatConnector.prototype.startConversation = function (address, done) {\r\n        if (address && address.user && address.bot && address.serviceUrl) {\r\n            var options = {\r\n                method: 'POST',\r\n                url: urlJoin(address.serviceUrl, '/v3/conversations'),\r\n                body: {\r\n                    bot: address.bot,\r\n                    members: [address.user]\r\n                },\r\n                json: true\r\n            };\r\n            this.authenticatedRequest(options, function (err, response, body) {\r\n                var adr;\r\n                if (!err) {\r\n                    try {\r\n                        var obj = typeof body === 'string' ? JSON.parse(body) : body;\r\n                        if (obj && obj.hasOwnProperty('id')) {\r\n                            adr = utils.clone(address);\r\n                            adr.conversation = { id: obj['id'] };\r\n                            if (adr.id) {\r\n                                delete adr.id;\r\n                            }\r\n                        }\r\n                        else {\r\n                            err = new Error('Failed to start conversation: no conversation ID returned.');\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        err = e instanceof Error ? e : new Error(e.toString());\r\n                    }\r\n                }\r\n                if (err) {\r\n                    logger.error('ChatConnector: startConversation - error starting conversation.');\r\n                }\r\n                done(err, adr);\r\n            });\r\n        }\r\n        else {\r\n            logger.error('ChatConnector: startConversation - address is invalid.');\r\n            done(new Error('Invalid address.'));\r\n        }\r\n    };\r\n    ChatConnector.prototype.getData = function (context, callback) {\r\n        var _this = this;\r\n        try {\r\n            var root = this.getStoragePath(context.address);\r\n            var list = [];\r\n            if (context.userId) {\r\n                if (context.persistUserData) {\r\n                    list.push({\r\n                        field: 'userData',\r\n                        url: root + '/users/' + encodeURIComponent(context.userId)\r\n                    });\r\n                }\r\n                if (context.conversationId) {\r\n                    list.push({\r\n                        field: 'privateConversationData',\r\n                        url: root + '/conversations/' + encodeURIComponent(context.conversationId) +\r\n                            '/users/' + encodeURIComponent(context.userId)\r\n                    });\r\n                }\r\n            }\r\n            if (context.persistConversationData && context.conversationId) {\r\n                list.push({\r\n                    field: 'conversationData',\r\n                    url: root + '/conversations/' + encodeURIComponent(context.conversationId)\r\n                });\r\n            }\r\n            var data = {};\r\n            async.each(list, function (entry, cb) {\r\n                var options = {\r\n                    method: 'GET',\r\n                    url: entry.url,\r\n                    json: true\r\n                };\r\n                _this.authenticatedRequest(options, function (err, response, body) {\r\n                    if (!err && body) {\r\n                        var botData = body.data ? body.data : {};\r\n                        if (typeof botData === 'string') {\r\n                            zlib.gunzip(new Buffer(botData, 'base64'), function (err, result) {\r\n                                if (!err) {\r\n                                    try {\r\n                                        var txt = result.toString();\r\n                                        data[entry.field + 'Hash'] = txt;\r\n                                        data[entry.field] = JSON.parse(txt);\r\n                                    }\r\n                                    catch (e) {\r\n                                        err = e;\r\n                                    }\r\n                                }\r\n                                cb(err);\r\n                            });\r\n                        }\r\n                        else {\r\n                            try {\r\n                                data[entry.field + 'Hash'] = JSON.stringify(botData);\r\n                                data[entry.field] = botData;\r\n                            }\r\n                            catch (e) {\r\n                                err = e;\r\n                            }\r\n                            cb(err);\r\n                        }\r\n                    }\r\n                    else {\r\n                        cb(err);\r\n                    }\r\n                });\r\n            }, function (err) {\r\n                if (!err) {\r\n                    callback(null, data);\r\n                }\r\n                else {\r\n                    var m = err.toString();\r\n                    callback(err instanceof Error ? err : new Error(m), null);\r\n                }\r\n            });\r\n        }\r\n        catch (e) {\r\n            callback(e instanceof Error ? e : new Error(e.toString()), null);\r\n        }\r\n    };\r\n    ChatConnector.prototype.saveData = function (context, data, callback) {\r\n        var _this = this;\r\n        var list = [];\r\n        function addWrite(field, botData, url) {\r\n            var hashKey = field + 'Hash';\r\n            var hash = JSON.stringify(botData);\r\n            if (!data[hashKey] || hash !== data[hashKey]) {\r\n                data[hashKey] = hash;\r\n                list.push({ botData: botData, url: url, hash: hash });\r\n            }\r\n        }\r\n        try {\r\n            var root = this.getStoragePath(context.address);\r\n            if (context.userId) {\r\n                if (context.persistUserData) {\r\n                    addWrite('userData', data.userData || {}, root + '/users/' + encodeURIComponent(context.userId));\r\n                }\r\n                if (context.conversationId) {\r\n                    var url = root + '/conversations/' + encodeURIComponent(context.conversationId) +\r\n                        '/users/' + encodeURIComponent(context.userId);\r\n                    addWrite('privateConversationData', data.privateConversationData || {}, url);\r\n                }\r\n            }\r\n            if (context.persistConversationData && context.conversationId) {\r\n                addWrite('conversationData', data.conversationData || {}, root + '/conversations/' + encodeURIComponent(context.conversationId));\r\n            }\r\n            async.each(list, function (entry, cb) {\r\n                if (_this.settings.gzipData) {\r\n                    zlib.gzip(entry.hash, function (err, result) {\r\n                        if (!err && result.length > MAX_DATA_LENGTH) {\r\n                            err = new Error(\"Data of \" + result.length + \" bytes gzipped exceeds the \" + MAX_DATA_LENGTH + \" byte limit. Can't post to: \" + entry.url);\r\n                            err.code = consts.Errors.EMSGSIZE;\r\n                        }\r\n                        if (!err) {\r\n                            var options = {\r\n                                method: 'POST',\r\n                                url: entry.url,\r\n                                body: { eTag: '*', data: result.toString('base64') },\r\n                                json: true\r\n                            };\r\n                            _this.authenticatedRequest(options, function (err, response, body) {\r\n                                cb(err);\r\n                            });\r\n                        }\r\n                        else {\r\n                            cb(err);\r\n                        }\r\n                    });\r\n                }\r\n                else if (entry.hash.length < MAX_DATA_LENGTH) {\r\n                    var options = {\r\n                        method: 'POST',\r\n                        url: entry.url,\r\n                        body: { eTag: '*', data: entry.botData },\r\n                        json: true\r\n                    };\r\n                    _this.authenticatedRequest(options, function (err, response, body) {\r\n                        cb(err);\r\n                    });\r\n                }\r\n                else {\r\n                    var err = new Error(\"Data of \" + entry.hash.length + \" bytes exceeds the \" + MAX_DATA_LENGTH + \" byte limit. Consider setting connectors gzipData option. Can't post to: \" + entry.url);\r\n                    err.code = consts.Errors.EMSGSIZE;\r\n                    cb(err);\r\n                }\r\n            }, function (err) {\r\n                if (callback) {\r\n                    if (!err) {\r\n                        callback(null);\r\n                    }\r\n                    else {\r\n                        var m = err.toString();\r\n                        callback(err instanceof Error ? err : new Error(m));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (callback) {\r\n                var err = e instanceof Error ? e : new Error(e.toString());\r\n                err.code = consts.Errors.EBADMSG;\r\n                callback(err);\r\n            }\r\n        }\r\n    };\r\n    ChatConnector.prototype.dispatch = function (msg, res) {\r\n        try {\r\n            this.prepIncomingMessage(msg);\r\n            logger.info(msg, 'ChatConnector: message received.');\r\n            if (this.isInvoke(msg)) {\r\n                this.onInvokeHandler(msg, function (err, body, status) {\r\n                    if (err) {\r\n                        res.status(500);\r\n                        res.end();\r\n                        logger.error('Received error from invoke handler: ', err.message || '');\r\n                    }\r\n                    else {\r\n                        res.send(status || 200, body);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.onEventHandler([msg]);\r\n                res.status(202);\r\n                res.end();\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e instanceof Error ? e.stack : e.toString());\r\n            res.status(500);\r\n            res.end();\r\n        }\r\n    };\r\n    ChatConnector.prototype.isInvoke = function (message) {\r\n        return (message && message.type && message.type.toLowerCase() == consts.invokeType);\r\n    };\r\n    ChatConnector.prototype.postMessage = function (msg, cb) {\r\n        logger.info(address, 'ChatConnector: sending message.');\r\n        this.prepOutgoingMessage(msg);\r\n        var address = msg.address;\r\n        msg['from'] = address.bot;\r\n        msg['recipient'] = address.user;\r\n        delete msg.address;\r\n        var path = '/v3/conversations/' + encodeURIComponent(address.conversation.id) + '/activities';\r\n        if (address.id && address.channelId !== 'skype') {\r\n            path += '/' + encodeURIComponent(address.id);\r\n        }\r\n        var options = {\r\n            method: 'POST',\r\n            url: urlJoin(address.serviceUrl, path),\r\n            body: msg,\r\n            json: true\r\n        };\r\n        if (address.useAuth) {\r\n            this.authenticatedRequest(options, function (err, response, body) { return cb(err); });\r\n        }\r\n        else {\r\n            this.addUserAgent(options);\r\n            request(options, function (err, response, body) {\r\n                if (!err && response.statusCode >= 400) {\r\n                    var txt = \"Request to '\" + options.url + \"' failed: [\" + response.statusCode + \"] \" + response.statusMessage;\r\n                    err = new Error(txt);\r\n                }\r\n                cb(err);\r\n            });\r\n        }\r\n    };\r\n    ChatConnector.prototype.authenticatedRequest = function (options, callback, refresh) {\r\n        var _this = this;\r\n        if (refresh === void 0) { refresh = false; }\r\n        if (refresh) {\r\n            this.accessToken = null;\r\n        }\r\n        this.addAccessToken(options, function (err) {\r\n            if (!err) {\r\n                request(options, function (err, response, body) {\r\n                    if (!err) {\r\n                        switch (response.statusCode) {\r\n                            case 401:\r\n                            case 403:\r\n                                if (!refresh) {\r\n                                    _this.authenticatedRequest(options, callback, true);\r\n                                }\r\n                                else {\r\n                                    callback(null, response, body);\r\n                                }\r\n                                break;\r\n                            default:\r\n                                if (response.statusCode < 400) {\r\n                                    callback(null, response, body);\r\n                                }\r\n                                else {\r\n                                    var txt = \"Request to '\" + options.url + \"' failed: [\" + response.statusCode + \"] \" + response.statusMessage;\r\n                                    callback(new Error(txt), response, null);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        callback(err, null, null);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                callback(err, null, null);\r\n            }\r\n        });\r\n    };\r\n    ChatConnector.prototype.getAccessToken = function (cb) {\r\n        var _this = this;\r\n        if (!this.accessToken || new Date().getTime() >= this.accessTokenExpires) {\r\n            var opt = {\r\n                method: 'POST',\r\n                url: this.settings.endpoint.refreshEndpoint,\r\n                form: {\r\n                    grant_type: 'client_credentials',\r\n                    client_id: this.settings.appId,\r\n                    client_secret: this.settings.appPassword,\r\n                    scope: this.settings.endpoint.refreshScope\r\n                }\r\n            };\r\n            request(opt, function (err, response, body) {\r\n                if (!err) {\r\n                    if (body && response.statusCode < 300) {\r\n                        var oauthResponse = JSON.parse(body);\r\n                        _this.accessToken = oauthResponse.access_token;\r\n                        _this.accessTokenExpires = new Date().getTime() + ((oauthResponse.expires_in - 300) * 1000);\r\n                        cb(null, _this.accessToken);\r\n                    }\r\n                    else {\r\n                        cb(new Error('Refresh access token failed with status code: ' + response.statusCode), null);\r\n                    }\r\n                }\r\n                else {\r\n                    cb(err, null);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            cb(null, this.accessToken);\r\n        }\r\n    };\r\n    ChatConnector.prototype.addUserAgent = function (options) {\r\n        if (options.headers == null) {\r\n            options.headers = {};\r\n        }\r\n        options.headers['User-Agent'] = USER_AGENT;\r\n    };\r\n    ChatConnector.prototype.addAccessToken = function (options, cb) {\r\n        this.addUserAgent(options);\r\n        if (this.settings.appId && this.settings.appPassword) {\r\n            this.getAccessToken(function (err, token) {\r\n                if (!err && token) {\r\n                    options.headers = {\r\n                        'Authorization': 'Bearer ' + token\r\n                    };\r\n                    cb(null);\r\n                }\r\n                else {\r\n                    cb(err);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            cb(null);\r\n        }\r\n    };\r\n    ChatConnector.prototype.getStoragePath = function (address) {\r\n        var path;\r\n        switch (address.channelId) {\r\n            case 'emulator':\r\n                if (address.serviceUrl) {\r\n                    path = address.serviceUrl;\r\n                }\r\n                else {\r\n                    throw new Error('ChatConnector.getStoragePath() missing address.serviceUrl.');\r\n                }\r\n                break;\r\n            default:\r\n                path = this.settings.endpoint.stateEndpoint;\r\n                break;\r\n        }\r\n        return path + '/v3/botstate/' + encodeURIComponent(address.channelId);\r\n    };\r\n    ChatConnector.prototype.prepIncomingMessage = function (msg) {\r\n        utils.moveFieldsTo(msg, msg, {\r\n            'locale': 'textLocale',\r\n            'channelData': 'sourceEvent'\r\n        });\r\n        msg.text = msg.text || '';\r\n        msg.attachments = msg.attachments || [];\r\n        msg.entities = msg.entities || [];\r\n        var address = {};\r\n        utils.moveFieldsTo(msg, address, toAddress);\r\n        msg.address = address;\r\n        msg.source = address.channelId;\r\n        if (msg.source == 'facebook' && msg.sourceEvent && msg.sourceEvent.message && msg.sourceEvent.message.quick_reply) {\r\n            msg.text = msg.sourceEvent.message.quick_reply.payload;\r\n        }\r\n    };\r\n    ChatConnector.prototype.prepOutgoingMessage = function (msg) {\r\n        if (msg.attachments) {\r\n            var attachments = [];\r\n            for (var i = 0; i < msg.attachments.length; i++) {\r\n                var a = msg.attachments[i];\r\n                switch (a.contentType) {\r\n                    case 'application/vnd.microsoft.keyboard':\r\n                        if (msg.address.channelId == 'facebook') {\r\n                            msg.sourceEvent = { quick_replies: [] };\r\n                            a.content.buttons.forEach(function (action) {\r\n                                switch (action.type) {\r\n                                    case 'imBack':\r\n                                    case 'postBack':\r\n                                        msg.sourceEvent.quick_replies.push({\r\n                                            content_type: 'text',\r\n                                            title: action.title,\r\n                                            payload: action.value\r\n                                        });\r\n                                        break;\r\n                                    default:\r\n                                        logger.warn(msg, \"Invalid keyboard '%s' button sent to facebook.\", action.type);\r\n                                        break;\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            a.contentType = 'application/vnd.microsoft.card.hero';\r\n                            attachments.push(a);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        attachments.push(a);\r\n                        break;\r\n                }\r\n            }\r\n            msg.attachments = attachments;\r\n        }\r\n        utils.moveFieldsTo(msg, msg, {\r\n            'textLocale': 'locale',\r\n            'sourceEvent': 'channelData'\r\n        });\r\n        delete msg.agent;\r\n        delete msg.source;\r\n    };\r\n    return ChatConnector;\r\n}());\r\nexports.ChatConnector = ChatConnector;\r\nvar toAddress = {\r\n    'id': 'id',\r\n    'channelId': 'channelId',\r\n    'from': 'user',\r\n    'conversation': 'conversation',\r\n    'recipient': 'bot',\r\n    'serviceUrl': 'serviceUrl',\r\n    'useAuth': 'useAuth'\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/bots/OpenIdMetadata.js":"\"use strict\";\r\nvar logger = require(\"../logger\");\r\nvar request = require(\"request\");\r\nvar getPem = require('rsa-pem-from-mod-exp');\r\nvar base64url = require('base64url');\r\nvar OpenIdMetadata = (function () {\r\n    function OpenIdMetadata(url) {\r\n        this.lastUpdated = 0;\r\n        this.url = url;\r\n    }\r\n    OpenIdMetadata.prototype.getKey = function (keyId, cb) {\r\n        var _this = this;\r\n        var now = new Date().getTime();\r\n        if (this.lastUpdated < (now - 1000 * 60 * 60 * 24 * 5)) {\r\n            this.refreshCache(function (err) {\r\n                if (err) {\r\n                    logger.error('Error retrieving OpenId metadata at ' + _this.url + ', error: ' + err.toString());\r\n                }\r\n                var key = _this.findKey(keyId);\r\n                cb(key);\r\n            });\r\n        }\r\n        else {\r\n            var key = this.findKey(keyId);\r\n            cb(key);\r\n        }\r\n    };\r\n    OpenIdMetadata.prototype.refreshCache = function (cb) {\r\n        var _this = this;\r\n        var options = {\r\n            method: 'GET',\r\n            url: this.url,\r\n            json: true\r\n        };\r\n        request(options, function (err, response, body) {\r\n            if (!err && (response.statusCode >= 400 || !body)) {\r\n                err = new Error('Failed to load openID config: ' + response.statusCode);\r\n            }\r\n            if (err) {\r\n                cb(err);\r\n            }\r\n            else {\r\n                var openIdConfig = body;\r\n                var options = {\r\n                    method: 'GET',\r\n                    url: openIdConfig.jwks_uri,\r\n                    json: true\r\n                };\r\n                request(options, function (err, response, body) {\r\n                    if (!err && (response.statusCode >= 400 || !body)) {\r\n                        err = new Error(\"Failed to load Keys: \" + response.statusCode);\r\n                    }\r\n                    if (!err) {\r\n                        _this.lastUpdated = new Date().getTime();\r\n                        _this.keys = body.keys;\r\n                    }\r\n                    cb(err);\r\n                });\r\n            }\r\n        });\r\n    };\r\n    OpenIdMetadata.prototype.findKey = function (keyId) {\r\n        if (!this.keys) {\r\n            return null;\r\n        }\r\n        for (var i = 0; i < this.keys.length; i++) {\r\n            if (this.keys[i].kid == keyId) {\r\n                var key = this.keys[i];\r\n                if (!key.n || !key.e) {\r\n                    return null;\r\n                }\r\n                var modulus = base64url.toBase64(key.n);\r\n                var exponent = key.e;\r\n                return getPem(modulus, exponent);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return OpenIdMetadata;\r\n}());\r\nexports.OpenIdMetadata = OpenIdMetadata;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/bots/ConsoleConnector.js":"\"use strict\";\r\nvar Message_1 = require(\"../Message\");\r\nvar utils = require(\"../utils\");\r\nvar readline = require(\"readline\");\r\nvar ConsoleConnector = (function () {\r\n    function ConsoleConnector() {\r\n        this.replyCnt = 0;\r\n    }\r\n    ConsoleConnector.prototype.listen = function () {\r\n        var _this = this;\r\n        this.rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\r\n        this.rl.on('line', function (line) {\r\n            _this.replyCnt = 0;\r\n            line = line || '';\r\n            if (line.toLowerCase() == 'quit') {\r\n                _this.rl.close();\r\n                process.exit();\r\n            }\r\n            else {\r\n                _this.processMessage(line);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    ConsoleConnector.prototype.processMessage = function (line) {\r\n        if (this.onEventHandler) {\r\n            var msg = new Message_1.Message()\r\n                .address({\r\n                channelId: 'console',\r\n                user: { id: 'user', name: 'User1' },\r\n                bot: { id: 'bot', name: 'Bot' },\r\n                conversation: { id: 'Convo1' }\r\n            })\r\n                .timestamp()\r\n                .text(line);\r\n            this.onEventHandler([msg.toMessage()]);\r\n        }\r\n        return this;\r\n    };\r\n    ConsoleConnector.prototype.onEvent = function (handler) {\r\n        this.onEventHandler = handler;\r\n    };\r\n    ConsoleConnector.prototype.onInvoke = function (handler) {\r\n        this.onInvokeHandler = handler;\r\n    };\r\n    ConsoleConnector.prototype.send = function (messages, done) {\r\n        for (var i = 0; i < messages.length; i++) {\r\n            if (this.replyCnt++ > 0) {\r\n                console.log();\r\n            }\r\n            var msg = messages[i];\r\n            if (msg.text) {\r\n                log(msg.text);\r\n            }\r\n            if (msg.attachments && msg.attachments.length > 0) {\r\n                for (var j = 0; j < msg.attachments.length; j++) {\r\n                    if (j > 0) {\r\n                        console.log();\r\n                    }\r\n                    renderAttachment(msg.attachments[j]);\r\n                }\r\n            }\r\n        }\r\n        done(null);\r\n    };\r\n    ConsoleConnector.prototype.startConversation = function (address, cb) {\r\n        var adr = utils.clone(address);\r\n        adr.conversation = { id: 'Convo1' };\r\n        cb(null, adr);\r\n    };\r\n    return ConsoleConnector;\r\n}());\r\nexports.ConsoleConnector = ConsoleConnector;\r\nfunction renderAttachment(a) {\r\n    switch (a.contentType) {\r\n        case 'application/vnd.microsoft.card.hero':\r\n        case 'application/vnd.microsoft.card.thumbnail':\r\n            var tc = a.content;\r\n            if (tc.title) {\r\n                if (tc.title.length <= 40) {\r\n                    line('=', 60, tc.title);\r\n                }\r\n                else {\r\n                    line('=', 60);\r\n                    wrap(tc.title, 60, 3);\r\n                }\r\n            }\r\n            if (tc.subtitle) {\r\n                wrap(tc.subtitle, 60, 3);\r\n            }\r\n            if (tc.text) {\r\n                wrap(tc.text, 60, 3);\r\n            }\r\n            renderImages(tc.images);\r\n            renderButtons(tc.buttons);\r\n            break;\r\n        case 'application/vnd.microsoft.card.signin':\r\n        case 'application/vnd.microsoft.card.receipt':\r\n        default:\r\n            line('.', 60, a.contentType);\r\n            if (a.contentUrl) {\r\n                wrap(a.contentUrl, 60, 3);\r\n            }\r\n            else {\r\n                log(JSON.stringify(a.content));\r\n            }\r\n            break;\r\n    }\r\n}\r\nfunction renderImages(images) {\r\n    if (images && images.length) {\r\n        line('.', 60, 'images');\r\n        var bullet = images.length > 1 ? '* ' : '';\r\n        for (var i = 0; i < images.length; i++) {\r\n            var img = images[i];\r\n            if (img.alt) {\r\n                wrap(bullet + img.alt + ': ' + img.url, 60, 3);\r\n            }\r\n            else {\r\n                wrap(bullet + img.url, 60, 3);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction renderButtons(actions) {\r\n    if (actions && actions.length) {\r\n        line('.', 60, 'buttons');\r\n        var bullet = actions.length > 1 ? '* ' : '';\r\n        for (var i = 0; i < actions.length; i++) {\r\n            var a = actions[i];\r\n            if (a.title == a.value) {\r\n                wrap(bullet + a.title, 60, 3);\r\n            }\r\n            else {\r\n                wrap(bullet + a.title + ' [' + a.value + ']', 60, 3);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction line(char, length, title) {\r\n    if (title) {\r\n        var txt = repeat(char, 2);\r\n        txt += '[' + title + ']';\r\n        if (length > txt.length) {\r\n            txt += repeat(char, length - txt.length);\r\n        }\r\n        log(txt);\r\n    }\r\n    else {\r\n        log(repeat(char, length));\r\n    }\r\n}\r\nfunction wrap(text, length, indent) {\r\n    if (indent === void 0) { indent = 0; }\r\n    var buffer = '';\r\n    var pad = indent ? repeat(' ', indent) : '';\r\n    var tokens = text.split(' ');\r\n    length -= pad.length;\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        var t = tokens[i];\r\n        if (buffer.length) {\r\n            if ((buffer.length + 1 + t.length) > length) {\r\n                log(pad + buffer);\r\n                buffer = t;\r\n            }\r\n            else {\r\n                buffer += ' ' + t;\r\n            }\r\n        }\r\n        else if (t.length < length) {\r\n            buffer = t;\r\n        }\r\n        else {\r\n            log(pad + t);\r\n        }\r\n    }\r\n    if (buffer.length) {\r\n        log(pad + buffer);\r\n    }\r\n}\r\nfunction repeat(char, length) {\r\n    var txt = '';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += char;\r\n    }\r\n    return txt;\r\n}\r\nfunction log(text) {\r\n    console.log(text);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/ReceiptCard.js":"\"use strict\";\r\nvar Message_1 = require(\"../Message\");\r\nvar ReceiptCard = (function () {\r\n    function ReceiptCard(session) {\r\n        this.session = session;\r\n        this.data = {\r\n            contentType: 'application/vnd.microsoft.card.receipt',\r\n            content: {}\r\n        };\r\n    }\r\n    ReceiptCard.prototype.title = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.title = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.items = function (list) {\r\n        this.data.content.items = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var item = list[i];\r\n                this.data.content.items.push(item.toItem ? item.toItem() : item);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.facts = function (list) {\r\n        this.data.content.facts = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var fact = list[i];\r\n                this.data.content.facts.push(fact.toFact ? fact.toFact() : fact);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.tap = function (action) {\r\n        if (action) {\r\n            this.data.content.tap = action.toAction ? action.toAction() : action;\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.total = function (v) {\r\n        this.data.content.total = v || '';\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.tax = function (v) {\r\n        this.data.content.tax = v || '';\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.vat = function (v) {\r\n        this.data.content.vat = v || '';\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.buttons = function (list) {\r\n        this.data.content.buttons = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var action = list[i];\r\n                this.data.content.buttons.push(action.toAction ? action.toAction() : action);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptCard.prototype.toAttachment = function () {\r\n        return this.data;\r\n    };\r\n    return ReceiptCard;\r\n}());\r\nexports.ReceiptCard = ReceiptCard;\r\nvar ReceiptItem = (function () {\r\n    function ReceiptItem(session) {\r\n        this.session = session;\r\n        this.data = {};\r\n    }\r\n    ReceiptItem.prototype.title = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.title = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.subtitle = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.subtitle = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.text = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.text = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.image = function (img) {\r\n        if (img) {\r\n            this.data.image = img.toImage ? img.toImage() : img;\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.price = function (v) {\r\n        this.data.price = v || '';\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.quantity = function (v) {\r\n        this.data.quantity = v || '';\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.tap = function (action) {\r\n        if (action) {\r\n            this.data.tap = action.toAction ? action.toAction() : action;\r\n        }\r\n        return this;\r\n    };\r\n    ReceiptItem.prototype.toItem = function () {\r\n        return this.data;\r\n    };\r\n    ReceiptItem.create = function (session, price, title) {\r\n        return new ReceiptItem(session).price(price).title(title);\r\n    };\r\n    return ReceiptItem;\r\n}());\r\nexports.ReceiptItem = ReceiptItem;\r\nvar Fact = (function () {\r\n    function Fact(session) {\r\n        this.session = session;\r\n        this.data = { value: '' };\r\n    }\r\n    Fact.prototype.key = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.key = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    Fact.prototype.value = function (v) {\r\n        this.data.value = v || '';\r\n        return this;\r\n    };\r\n    Fact.prototype.toFact = function () {\r\n        return this.data;\r\n    };\r\n    Fact.create = function (session, value, key) {\r\n        return new Fact(session).value(value).key(key);\r\n    };\r\n    return Fact;\r\n}());\r\nexports.Fact = Fact;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/SigninCard.js":"\"use strict\";\r\nvar Message_1 = require(\"../Message\");\r\nvar SigninCard = (function () {\r\n    function SigninCard(session) {\r\n        this.session = session;\r\n        this.data = {\r\n            contentType: 'application/vnd.microsoft.card.signin',\r\n            content: {}\r\n        };\r\n    }\r\n    SigninCard.prototype.text = function (prompts) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (prompts) {\r\n            this.data.content.text = Message_1.fmtText(this.session, prompts, args);\r\n        }\r\n        return this;\r\n    };\r\n    SigninCard.prototype.button = function (title, url) {\r\n        if (title && url) {\r\n            this.data.content.buttons = [{\r\n                    type: 'signin',\r\n                    title: Message_1.fmtText(this.session, title),\r\n                    value: url\r\n                }];\r\n        }\r\n        return this;\r\n    };\r\n    SigninCard.prototype.toAttachment = function () {\r\n        return this.data;\r\n    };\r\n    return SigninCard;\r\n}());\r\nexports.SigninCard = SigninCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/VideoCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Message_1 = require(\"../Message\");\r\nvar MediaCard_1 = require(\"./MediaCard\");\r\nvar VideoCard = (function (_super) {\r\n    __extends(VideoCard, _super);\r\n    function VideoCard(session) {\r\n        var _this = _super.call(this, session) || this;\r\n        _this.data.contentType = 'application/vnd.microsoft.card.video';\r\n        return _this;\r\n    }\r\n    VideoCard.prototype.aspect = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.aspect = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    return VideoCard;\r\n}(MediaCard_1.MediaCard));\r\nexports.VideoCard = VideoCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/MediaCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Message_1 = require(\"../Message\");\r\nvar Keyboard_1 = require(\"./Keyboard\");\r\nvar MediaCard = (function (_super) {\r\n    __extends(MediaCard, _super);\r\n    function MediaCard(session) {\r\n        return _super.call(this, session) || this;\r\n    }\r\n    MediaCard.prototype.title = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.title = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    MediaCard.prototype.subtitle = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.subtitle = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    MediaCard.prototype.text = function (text) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (text) {\r\n            this.data.content.text = Message_1.fmtText(this.session, text, args);\r\n        }\r\n        return this;\r\n    };\r\n    MediaCard.prototype.autoloop = function (choice) {\r\n        this.data.content.autoloop = choice;\r\n        return this;\r\n    };\r\n    MediaCard.prototype.autostart = function (choice) {\r\n        this.data.content.autostart = choice;\r\n        return this;\r\n    };\r\n    MediaCard.prototype.shareable = function (choice) {\r\n        this.data.content.shareable = choice;\r\n        return this;\r\n    };\r\n    MediaCard.prototype.image = function (image) {\r\n        if (image) {\r\n            this.data.content.image = image.toImage ? image.toImage() : image;\r\n        }\r\n        return this;\r\n    };\r\n    MediaCard.prototype.media = function (list) {\r\n        this.data.content.media = [];\r\n        if (list) {\r\n            for (var i = 0; i < list.length; i++) {\r\n                var media = list[i];\r\n                this.data.content.media.push(media.toMedia ? media.toMedia() : media);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    return MediaCard;\r\n}(Keyboard_1.Keyboard));\r\nexports.MediaCard = MediaCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/AudioCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MediaCard_1 = require(\"./MediaCard\");\r\nvar AudioCard = (function (_super) {\r\n    __extends(AudioCard, _super);\r\n    function AudioCard(session) {\r\n        var _this = _super.call(this, session) || this;\r\n        _this.data.contentType = 'application/vnd.microsoft.card.audio';\r\n        return _this;\r\n    }\r\n    return AudioCard;\r\n}(MediaCard_1.MediaCard));\r\nexports.AudioCard = AudioCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/AnimationCard.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MediaCard_1 = require(\"./MediaCard\");\r\nvar AnimationCard = (function (_super) {\r\n    __extends(AnimationCard, _super);\r\n    function AnimationCard(session) {\r\n        var _this = _super.call(this, session) || this;\r\n        _this.data.contentType = 'application/vnd.microsoft.card.animation';\r\n        return _this;\r\n    }\r\n    return AnimationCard;\r\n}(MediaCard_1.MediaCard));\r\nexports.AnimationCard = AnimationCard;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/cards/CardMedia.js":"\"use strict\";\r\nvar CardMedia = (function () {\r\n    function CardMedia(session) {\r\n        this.session = session;\r\n        this.data = {};\r\n    }\r\n    CardMedia.prototype.url = function (u) {\r\n        if (u) {\r\n            this.data.url = u;\r\n        }\r\n        return this;\r\n    };\r\n    CardMedia.prototype.profile = function (text) {\r\n        if (text) {\r\n            this.data.profile = text;\r\n        }\r\n        return this;\r\n    };\r\n    CardMedia.prototype.toMedia = function () {\r\n        return this.data;\r\n    };\r\n    CardMedia.create = function (session, url) {\r\n        return new CardMedia(session).url(url);\r\n    };\r\n    return CardMedia;\r\n}());\r\nexports.CardMedia = CardMedia;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/middleware/Middleware.js":"\"use strict\";\r\nvar Dialog_1 = require(\"../dialogs/Dialog\");\r\nvar Library_1 = require(\"../bots/Library\");\r\nvar SimpleDialog_1 = require(\"../dialogs/SimpleDialog\");\r\nvar consts = require(\"../consts\");\r\nvar Middleware = (function () {\r\n    function Middleware() {\r\n    }\r\n    Middleware.dialogVersion = function (options) {\r\n        return {\r\n            botbuilder: function (session, next) {\r\n                var cur = session.sessionState.version || 0.0;\r\n                var curMajor = Math.floor(cur);\r\n                var major = Math.floor(options.version);\r\n                if (session.sessionState.callstack.length && curMajor !== major) {\r\n                    session.endConversation(options.message || \"Sorry. The service was upgraded and we need to start over.\");\r\n                }\r\n                else if (options.resetCommand && session.message.text && options.resetCommand.test(session.message.text)) {\r\n                    session.endConversation(options.message || \"Sorry. The service was upgraded and we need to start over.\");\r\n                }\r\n                else {\r\n                    session.sessionState.version = options.version;\r\n                    next();\r\n                }\r\n            }\r\n        };\r\n    };\r\n    Middleware.firstRun = function (options) {\r\n        return {\r\n            botbuilder: function (session, next) {\r\n                if (session.sessionState.callstack.length == 0) {\r\n                    var cur = session.userData[consts.Data.FirstRunVersion] || 0.0;\r\n                    var curMajor = Math.floor(cur);\r\n                    var major = Math.floor(options.version);\r\n                    if (major > curMajor) {\r\n                        session.beginDialog(consts.DialogId.FirstRun, {\r\n                            version: options.version,\r\n                            dialogId: options.dialogId,\r\n                            dialogArgs: options.dialogArgs\r\n                        });\r\n                    }\r\n                    else if (options.version > cur && options.upgradeDialogId) {\r\n                        session.beginDialog(consts.DialogId.FirstRun, {\r\n                            version: options.version,\r\n                            dialogId: options.upgradeDialogId,\r\n                            dialogArgs: options.upgradeDialogArgs\r\n                        });\r\n                    }\r\n                    else {\r\n                        next();\r\n                    }\r\n                }\r\n                else {\r\n                    next();\r\n                }\r\n            }\r\n        };\r\n    };\r\n    Middleware.sendTyping = function () {\r\n        return {\r\n            botbuilder: function (session, next) {\r\n                session.sendTyping();\r\n                next();\r\n            }\r\n        };\r\n    };\r\n    return Middleware;\r\n}());\r\nexports.Middleware = Middleware;\r\nLibrary_1.systemLib.dialog(consts.DialogId.FirstRun, new SimpleDialog_1.SimpleDialog(function (session, args) {\r\n    if (args && args.hasOwnProperty('resumed')) {\r\n        var result = args;\r\n        if (result.resumed == Dialog_1.ResumeReason.completed) {\r\n            session.userData[consts.Data.FirstRunVersion] = session.dialogData.version;\r\n        }\r\n        session.endDialogWithResult(result);\r\n    }\r\n    else {\r\n        var dialogId = args.dialogId.indexOf(':') >= 0 ? args.dialogId : consts.Library.default + ':' + args.dialogId;\r\n        session.dialogData.version = args.version;\r\n        session.beginDialog(dialogId, args.dialogArgs);\r\n    }\r\n}));\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/RegExpRecognizer.js":"\"use strict\";\r\nvar RegExpRecognizer = (function () {\r\n    function RegExpRecognizer(intent, expressions) {\r\n        this.intent = intent;\r\n        if (expressions instanceof RegExp || typeof expressions.exec === 'function') {\r\n            this.expressions = { '*': expressions };\r\n        }\r\n        else {\r\n            this.expressions = (expressions || {});\r\n        }\r\n    }\r\n    RegExpRecognizer.prototype.recognize = function (context, cb) {\r\n        var result = { score: 0.0, intent: null };\r\n        if (context && context.message && context.message.text) {\r\n            var utterance = context.message.text;\r\n            var locale = context.locale || '*';\r\n            var exp = this.expressions.hasOwnProperty(locale) ? this.expressions[locale] : this.expressions['*'];\r\n            if (exp) {\r\n                var matches = exp.exec(context.message.text);\r\n                if (matches && matches.length) {\r\n                    var matched = matches[0];\r\n                    result.score = matched.length / context.message.text.length;\r\n                    result.intent = this.intent;\r\n                    result.expression = exp;\r\n                    result.matched = matches;\r\n                }\r\n                cb(null, result);\r\n            }\r\n            else {\r\n                cb(new Error(\"Expression not found for locale '\" + locale + \"'.\"), null);\r\n            }\r\n        }\r\n        else {\r\n            cb(null, result);\r\n        }\r\n    };\r\n    return RegExpRecognizer;\r\n}());\r\nexports.RegExpRecognizer = RegExpRecognizer;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/LuisRecognizer.js":"\"use strict\";\r\nvar request = require(\"request\");\r\nvar LuisRecognizer = (function () {\r\n    function LuisRecognizer(models) {\r\n        if (typeof models == 'string') {\r\n            this.models = { '*': models };\r\n        }\r\n        else {\r\n            this.models = (models || {});\r\n        }\r\n    }\r\n    LuisRecognizer.prototype.recognize = function (context, cb) {\r\n        var result = { score: 0.0, intent: null };\r\n        if (context && context.message && context.message.text) {\r\n            var utterance = context.message.text;\r\n            var locale = context.locale || '*';\r\n            var model = this.models.hasOwnProperty(locale) ? this.models[locale] : this.models['*'];\r\n            if (model) {\r\n                LuisRecognizer.recognize(utterance, model, function (err, intents, entities) {\r\n                    if (!err) {\r\n                        result.intents = intents;\r\n                        result.entities = entities;\r\n                        var top;\r\n                        intents.forEach(function (intent) {\r\n                            if (top) {\r\n                                if (intent.score > top.score) {\r\n                                    top = intent;\r\n                                }\r\n                            }\r\n                            else {\r\n                                top = intent;\r\n                            }\r\n                        });\r\n                        if (top) {\r\n                            result.score = top.score;\r\n                            result.intent = top.intent;\r\n                            switch (top.intent.toLowerCase()) {\r\n                                case 'builtin.intent.none':\r\n                                case 'none':\r\n                                    result.score = 0.1;\r\n                                    break;\r\n                            }\r\n                        }\r\n                        cb(null, result);\r\n                    }\r\n                    else {\r\n                        cb(err, null);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                cb(new Error(\"LUIS model not found for locale '\" + locale + \"'.\"), null);\r\n            }\r\n        }\r\n        else {\r\n            cb(null, result);\r\n        }\r\n    };\r\n    LuisRecognizer.recognize = function (utterance, modelUrl, callback) {\r\n        try {\r\n            var uri = modelUrl.trim();\r\n            if (uri.lastIndexOf('&q=') != uri.length - 3) {\r\n                uri += '&q=';\r\n            }\r\n            uri += encodeURIComponent(utterance || '');\r\n            request.get(uri, function (err, res, body) {\r\n                var result;\r\n                try {\r\n                    if (!err) {\r\n                        result = JSON.parse(body);\r\n                        result.intents = result.intents || [];\r\n                        result.entities = result.entities || [];\r\n                        if (result.topScoringIntent && result.intents.length == 0) {\r\n                            result.intents.push(result.topScoringIntent);\r\n                        }\r\n                        if (result.intents.length == 1 && typeof result.intents[0].score !== 'number') {\r\n                            result.intents[0].score = 1.0;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    err = e;\r\n                }\r\n                try {\r\n                    if (!err) {\r\n                        callback(null, result.intents, result.entities);\r\n                    }\r\n                    else {\r\n                        var m = err.toString();\r\n                        callback(err instanceof Error ? err : new Error(m));\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    console.error(e.toString());\r\n                }\r\n            });\r\n        }\r\n        catch (err) {\r\n            callback(err instanceof Error ? err : new Error(err.toString()));\r\n        }\r\n    };\r\n    return LuisRecognizer;\r\n}());\r\nexports.LuisRecognizer = LuisRecognizer;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/IntentDialog.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar SimpleDialog_1 = require(\"./SimpleDialog\");\r\nvar DialogAction_1 = require(\"./DialogAction\");\r\nvar Dialog_1 = require(\"./Dialog\");\r\nvar IntentRecognizerSet_1 = require(\"./IntentRecognizerSet\");\r\nvar RegExpRecognizer_1 = require(\"./RegExpRecognizer\");\r\nvar consts = require(\"../consts\");\r\nvar logger = require(\"../logger\");\r\nvar RecognizeMode;\r\n(function (RecognizeMode) {\r\n    RecognizeMode[RecognizeMode[\"onBegin\"] = 0] = \"onBegin\";\r\n    RecognizeMode[RecognizeMode[\"onBeginIfRoot\"] = 1] = \"onBeginIfRoot\";\r\n    RecognizeMode[RecognizeMode[\"onReply\"] = 2] = \"onReply\";\r\n})(RecognizeMode = exports.RecognizeMode || (exports.RecognizeMode = {}));\r\nvar IntentDialog = (function (_super) {\r\n    __extends(IntentDialog, _super);\r\n    function IntentDialog(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this) || this;\r\n        _this.handlers = {};\r\n        _this.recognizers = new IntentRecognizerSet_1.IntentRecognizerSet(options);\r\n        if (typeof options.recognizeMode !== \"undefined\") {\r\n            _this.recognizeMode = options.recognizeMode;\r\n        }\r\n        else {\r\n            _this.recognizeMode = RecognizeMode.onBeginIfRoot;\r\n        }\r\n        return _this;\r\n    }\r\n    IntentDialog.prototype.begin = function (session, args) {\r\n        var _this = this;\r\n        var mode = this.recognizeMode;\r\n        var isRoot = (session.sessionState.callstack.length == 1);\r\n        var recognize = (mode == RecognizeMode.onBegin || (isRoot && mode == RecognizeMode.onBeginIfRoot));\r\n        if (this.beginDialog) {\r\n            try {\r\n                logger.info(session, 'IntentDialog.begin()');\r\n                this.beginDialog(session, args, function () {\r\n                    if (recognize) {\r\n                        _this.replyReceived(session);\r\n                    }\r\n                });\r\n            }\r\n            catch (e) {\r\n                this.emitError(session, e);\r\n            }\r\n        }\r\n        else if (recognize) {\r\n            this.replyReceived(session);\r\n        }\r\n    };\r\n    IntentDialog.prototype.replyReceived = function (session, recognizeResult) {\r\n        var _this = this;\r\n        if (!recognizeResult) {\r\n            var locale = session.preferredLocale();\r\n            var context = session.toRecognizeContext();\r\n            context.dialogData = session.dialogData;\r\n            context.activeDialog = true;\r\n            this.recognize(context, function (err, result) {\r\n                if (!err) {\r\n                    _this.invokeIntent(session, result);\r\n                }\r\n                else {\r\n                    _this.emitError(session, err);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.invokeIntent(session, recognizeResult);\r\n        }\r\n    };\r\n    IntentDialog.prototype.dialogResumed = function (session, result) {\r\n        var activeIntent = session.dialogData[consts.Data.Intent];\r\n        if (activeIntent && this.handlers.hasOwnProperty(activeIntent)) {\r\n            try {\r\n                this.handlers[activeIntent](session, result);\r\n            }\r\n            catch (e) {\r\n                this.emitError(session, e);\r\n            }\r\n        }\r\n        else {\r\n            _super.prototype.dialogResumed.call(this, session, result);\r\n        }\r\n    };\r\n    IntentDialog.prototype.recognize = function (context, cb) {\r\n        this.recognizers.recognize(context, cb);\r\n    };\r\n    IntentDialog.prototype.onBegin = function (handler) {\r\n        this.beginDialog = handler;\r\n        return this;\r\n    };\r\n    IntentDialog.prototype.matches = function (intent, dialogId, dialogArgs) {\r\n        var id;\r\n        if (intent) {\r\n            if (typeof intent === 'string') {\r\n                id = intent;\r\n            }\r\n            else {\r\n                id = intent.toString();\r\n                this.recognizers.recognizer(new RegExpRecognizer_1.RegExpRecognizer(id, intent));\r\n            }\r\n        }\r\n        if (this.handlers.hasOwnProperty(id)) {\r\n            throw new Error(\"A handler for '\" + id + \"' already exists.\");\r\n        }\r\n        if (Array.isArray(dialogId)) {\r\n            this.handlers[id] = SimpleDialog_1.createWaterfall(dialogId);\r\n        }\r\n        else if (typeof dialogId === 'string') {\r\n            this.handlers[id] = DialogAction_1.DialogAction.beginDialog(dialogId, dialogArgs);\r\n        }\r\n        else {\r\n            this.handlers[id] = SimpleDialog_1.createWaterfall([dialogId]);\r\n        }\r\n        return this;\r\n    };\r\n    IntentDialog.prototype.matchesAny = function (intents, dialogId, dialogArgs) {\r\n        for (var i = 0; i < intents.length; i++) {\r\n            this.matches(intents[i], dialogId, dialogArgs);\r\n        }\r\n        return this;\r\n    };\r\n    IntentDialog.prototype.onDefault = function (dialogId, dialogArgs) {\r\n        if (Array.isArray(dialogId)) {\r\n            this.handlers[consts.Intents.Default] = SimpleDialog_1.createWaterfall(dialogId);\r\n        }\r\n        else if (typeof dialogId === 'string') {\r\n            this.handlers[consts.Intents.Default] = DialogAction_1.DialogAction.beginDialog(dialogId, dialogArgs);\r\n        }\r\n        else {\r\n            this.handlers[consts.Intents.Default] = SimpleDialog_1.createWaterfall([dialogId]);\r\n        }\r\n        return this;\r\n    };\r\n    IntentDialog.prototype.recognizer = function (plugin) {\r\n        this.recognizers.recognizer(plugin);\r\n        return this;\r\n    };\r\n    IntentDialog.prototype.invokeIntent = function (session, recognizeResult) {\r\n        var activeIntent;\r\n        if (recognizeResult.intent && this.handlers.hasOwnProperty(recognizeResult.intent)) {\r\n            logger.info(session, 'IntentDialog.matches(%s)', recognizeResult.intent);\r\n            activeIntent = recognizeResult.intent;\r\n        }\r\n        else if (this.handlers.hasOwnProperty(consts.Intents.Default)) {\r\n            logger.info(session, 'IntentDialog.onDefault()');\r\n            activeIntent = consts.Intents.Default;\r\n        }\r\n        if (activeIntent) {\r\n            try {\r\n                session.dialogData[consts.Data.Intent] = activeIntent;\r\n                this.handlers[activeIntent](session, recognizeResult);\r\n            }\r\n            catch (e) {\r\n                this.emitError(session, e);\r\n            }\r\n        }\r\n        else {\r\n            logger.warn(session, 'IntentDialog - no intent handler found for %s', recognizeResult.intent);\r\n        }\r\n    };\r\n    IntentDialog.prototype.emitError = function (session, err) {\r\n        var m = err.toString();\r\n        err = err instanceof Error ? err : new Error(m);\r\n        session.error(err);\r\n    };\r\n    return IntentDialog;\r\n}(Dialog_1.Dialog));\r\nexports.IntentDialog = IntentDialog;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/deprecated/BotConnectorBot.js":"\"use strict\";\r\nvar UniversalBot_1 = require(\"../bots/UniversalBot\");\r\nvar ChatConnector_1 = require(\"../bots/ChatConnector\");\r\nvar BotConnectorBot = (function () {\r\n    function BotConnectorBot(options) {\r\n        console.warn('BotConnectorBot class is deprecated. Use UniversalBot with a ChatConnector class.');\r\n        var oConnector = {};\r\n        var oBot = {};\r\n        for (var key in options) {\r\n            switch (key) {\r\n                case 'appId':\r\n                    oConnector.appId = options.appId;\r\n                    break;\r\n                case 'appSecret':\r\n                    oConnector.appPassword = options.appSecret;\r\n                    break;\r\n                case 'defaultDialogId':\r\n                    oBot.defaultDialogId = options.defaultDialogId;\r\n                    break;\r\n                case 'defaultDialogArgs':\r\n                    oBot.defaultDialogArgs = options.defaultDialogArgs;\r\n                    break;\r\n                case 'groupWelcomeMessage':\r\n                    this.groupWelcomeMessage = options.groupWelcomeMessage;\r\n                    break;\r\n                case 'userWelcomeMessage':\r\n                    this.userWelcomeMessage = options.userWelcomeMessage;\r\n                    break;\r\n                case 'goodbyeMessage':\r\n                    this.goodbyeMessage = options.goodbyeMessage;\r\n                    break;\r\n                case 'userStore':\r\n                case 'conversationStore':\r\n                case 'perUserInConversationStore':\r\n                    console.error('BotConnectorBot custom stores no longer supported. Use UniversalBot with a custom IBotStorage implementation instead.');\r\n                    throw new Error('BotConnectorBot custom stores no longer supported.');\r\n            }\r\n        }\r\n        this.connector = new ChatConnector_1.ChatConnector(oConnector);\r\n        this.bot = new UniversalBot_1.UniversalBot(this.connector, oBot);\r\n    }\r\n    BotConnectorBot.prototype.on = function (event, listener) {\r\n        this.bot.on(event, listener);\r\n        return this;\r\n    };\r\n    BotConnectorBot.prototype.add = function (id, dialog) {\r\n        this.bot.dialog(id, dialog);\r\n        return this;\r\n    };\r\n    BotConnectorBot.prototype.configure = function (options) {\r\n        console.error(\"BotConnectorBot.configure() is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\r\n        throw new Error(\"BotConnectorBot.configure() is no longer supported.\");\r\n    };\r\n    BotConnectorBot.prototype.verifyBotFramework = function (options) {\r\n        if (options) {\r\n            console.error(\"Calling BotConnectorBot.verifyBotFramework() with options is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\r\n            throw new Error(\"Calling BotConnectorBot.verifyBotFramework() with options is no longer supported.\");\r\n        }\r\n        return function (req, res, next) { return next(); };\r\n    };\r\n    BotConnectorBot.prototype.listen = function (dialogId, dialogArgs) {\r\n        if (dialogId) {\r\n            console.error(\"Calling BotConnectorBot.listen() with a custom dialogId is no longer supported. You should either pass as defaultDialogId into the constructor or update code to use the new UniversalBot class.\");\r\n            throw new Error(\"Calling BotConnectorBot.listen() with a custom dialogId is no longer supported.\");\r\n        }\r\n        return this.connector.listen();\r\n    };\r\n    BotConnectorBot.prototype.beginDialog = function (address, dialogId, dialogArgs) {\r\n        console.error(\"BotConnectorBot.beginDialog() is no longer supported. The schema for sending proactive messages has changed and you should update your code to use the new UniversalBot class.\");\r\n        throw new Error(\"BotConnectorBot.beginDialog() is no longer supported.\");\r\n    };\r\n    return BotConnectorBot;\r\n}());\r\nexports.BotConnectorBot = BotConnectorBot;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/deprecated/LuisDialog.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Dialog_1 = require(\"../dialogs/Dialog\");\r\nvar IntentDialog_1 = require(\"../dialogs/IntentDialog\");\r\nvar LuisRecognizer_1 = require(\"../dialogs/LuisRecognizer\");\r\nvar LuisDialog = (function (_super) {\r\n    __extends(LuisDialog, _super);\r\n    function LuisDialog(serviceUri) {\r\n        var _this = _super.call(this) || this;\r\n        console.warn('LuisDialog class is deprecated. Use IntentDialog with a LuisRecognizer instead.');\r\n        var recognizer = new LuisRecognizer_1.LuisRecognizer(serviceUri);\r\n        _this.dialog = new IntentDialog_1.IntentDialog({ recognizers: [recognizer] });\r\n        return _this;\r\n    }\r\n    LuisDialog.prototype.begin = function (session, args) {\r\n        this.dialog.begin(session, args);\r\n    };\r\n    LuisDialog.prototype.replyReceived = function (session, recognizeResult) {\r\n    };\r\n    LuisDialog.prototype.dialogResumed = function (session, result) {\r\n        this.dialog.dialogResumed(session, result);\r\n    };\r\n    LuisDialog.prototype.recognize = function (context, cb) {\r\n        this.dialog.recognize(context, cb);\r\n    };\r\n    LuisDialog.prototype.onBegin = function (handler) {\r\n        this.dialog.onBegin(handler);\r\n        return this;\r\n    };\r\n    LuisDialog.prototype.on = function (intent, dialogId, dialogArgs) {\r\n        this.dialog.matches(intent, dialogId, dialogArgs);\r\n        return this;\r\n    };\r\n    LuisDialog.prototype.onDefault = function (dialogId, dialogArgs) {\r\n        this.dialog.onDefault(dialogId, dialogArgs);\r\n        return this;\r\n    };\r\n    return LuisDialog;\r\n}(Dialog_1.Dialog));\r\nexports.LuisDialog = LuisDialog;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/deprecated/CommandDialog.js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Dialog_1 = require(\"../dialogs/Dialog\");\r\nvar IntentDialog_1 = require(\"../dialogs/IntentDialog\");\r\nvar CommandDialog = (function (_super) {\r\n    __extends(CommandDialog, _super);\r\n    function CommandDialog(serviceUri) {\r\n        var _this = _super.call(this) || this;\r\n        console.warn('CommandDialog class is deprecated. Use IntentDialog class instead.');\r\n        _this.dialog = new IntentDialog_1.IntentDialog();\r\n        return _this;\r\n    }\r\n    CommandDialog.prototype.begin = function (session, args) {\r\n        this.dialog.begin(session, args);\r\n    };\r\n    CommandDialog.prototype.replyReceived = function (session, recognizeResult) {\r\n    };\r\n    CommandDialog.prototype.dialogResumed = function (session, result) {\r\n        this.dialog.dialogResumed(session, result);\r\n    };\r\n    CommandDialog.prototype.recognize = function (context, cb) {\r\n        this.dialog.recognize(context, cb);\r\n    };\r\n    CommandDialog.prototype.onBegin = function (handler) {\r\n        this.dialog.onBegin(handler);\r\n        return this;\r\n    };\r\n    CommandDialog.prototype.matches = function (patterns, dialogId, dialogArgs) {\r\n        var _this = this;\r\n        var list = (!Array.isArray(patterns) ? [patterns] : patterns);\r\n        list.forEach(function (p) {\r\n            _this.dialog.matches(new RegExp(p, 'i'), dialogId, dialogArgs);\r\n        });\r\n        return this;\r\n    };\r\n    CommandDialog.prototype.onDefault = function (dialogId, dialogArgs) {\r\n        this.dialog.onDefault(dialogId, dialogArgs);\r\n        return this;\r\n    };\r\n    return CommandDialog;\r\n}(Dialog_1.Dialog));\r\nexports.CommandDialog = CommandDialog;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/deprecated/TextBot.js":"\"use strict\";\r\nvar UniversalBot_1 = require(\"../bots/UniversalBot\");\r\nvar ConsoleConnector_1 = require(\"../bots/ConsoleConnector\");\r\nvar TextBot = (function () {\r\n    function TextBot(options) {\r\n        if (options === void 0) { options = {}; }\r\n        console.warn('TextBot class is deprecated. Use UniversalBot with a ConsoleConnector class.');\r\n        var oBot = {};\r\n        for (var key in options) {\r\n            switch (key) {\r\n                case 'defaultDialogId':\r\n                    oBot.defaultDialogId = options.defaultDialogId;\r\n                    break;\r\n                case 'defaultDialogArgs':\r\n                    oBot.defaultDialogArgs = options.defaultDialogArgs;\r\n                    break;\r\n                case 'groupWelcomeMessage':\r\n                    this.groupWelcomeMessage = options.groupWelcomeMessage;\r\n                    break;\r\n                case 'userWelcomeMessage':\r\n                    this.userWelcomeMessage = options.userWelcomeMessage;\r\n                    break;\r\n                case 'goodbyeMessage':\r\n                    this.goodbyeMessage = options.goodbyeMessage;\r\n                    break;\r\n                case 'userStore':\r\n                case 'sessionStore':\r\n                    console.error('TextBot custom stores no longer supported. Use UniversalBot with a custom IBotStorage implementation instead.');\r\n                    throw new Error('TextBot custom stores no longer supported.');\r\n            }\r\n        }\r\n        this.connector = new ConsoleConnector_1.ConsoleConnector();\r\n        this.bot = new UniversalBot_1.UniversalBot(this.connector, oBot);\r\n    }\r\n    TextBot.prototype.on = function (event, listener) {\r\n        this.bot.on(event, listener);\r\n        return this;\r\n    };\r\n    TextBot.prototype.add = function (id, dialog) {\r\n        this.bot.dialog(id, dialog);\r\n        return this;\r\n    };\r\n    TextBot.prototype.configure = function (options) {\r\n        console.error(\"TextBot.configure() is no longer supported. You should either pass all options into the constructor or update code to use the new UniversalBot class.\");\r\n        throw new Error(\"TextBot.configure() is no longer supported.\");\r\n    };\r\n    TextBot.prototype.listenStdin = function () {\r\n        return this.connector.listen();\r\n    };\r\n    TextBot.prototype.beginDialog = function (address, dialogId, dialogArgs) {\r\n        console.error(\"TextBot.beginDialog() is no longer supported. The schema for sending proactive messages has changed and you should update your code to use the new UniversalBot class.\");\r\n        throw new Error(\"TextBot.beginDialog() is no longer supported.\");\r\n    };\r\n    TextBot.prototype.processMessage = function (message, callback) {\r\n        console.error(\"TextBot.processMessage() is no longer supported. The schema for messages has changed and you should update your code to use the new UniversalBot class.\");\r\n        throw new Error(\"TextBot.processMessage() is no longer supported.\");\r\n    };\r\n    return TextBot;\r\n}());\r\nexports.TextBot = TextBot;\r\n","/home/travis/build/npmtest/node-npmtest-botbuilder/node_modules/botbuilder/lib/dialogs/Fields.js":"\"use strict\";\r\nvar dialog = require('./Dialog');\r\nvar consts = require('../consts');\r\nvar prompts = require('./Prompts');\r\nvar mb = require('../Message');\r\nvar sd = require('./SimpleDialog');\r\nvar dl = require('../bots/Library');\r\nvar utils = require('../utils');\r\nvar er = require('./EntityRecognizer');\r\nvar FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"text\"] = 0] = \"text\";\r\n    FieldType[FieldType[\"number\"] = 1] = \"number\";\r\n    FieldType[FieldType[\"confirm\"] = 2] = \"confirm\";\r\n    FieldType[FieldType[\"choice\"] = 3] = \"choice\";\r\n    FieldType[FieldType[\"time\"] = 4] = \"time\";\r\n    FieldType[FieldType[\"dialog\"] = 5] = \"dialog\";\r\n})(FieldType || (FieldType = {}));\r\nvar Fields = (function () {\r\n    function Fields() {\r\n    }\r\n    Fields.text = function (field, prompt, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.text;\r\n            args.prompt = prompt;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.number = function (field, prompt, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.number;\r\n            args.prompt = prompt;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.confirm = function (field, prompt, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.confirm;\r\n            args.prompt = prompt;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.choice = function (field, prompt, choices, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.choice;\r\n            args.prompt = prompt;\r\n            args.enumValues = er.EntityRecognizer.expandChoices(choices);\r\n            args.listStyle = args.hasOwnProperty('listStyle') ? args.listStyle : prompts.ListStyle.auto;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.time = function (field, prompt, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.time;\r\n            args.prompt = prompt;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.dialog = function (field, dialogId, dialogArgs, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return function (session, results, next) {\r\n            var args = utils.clone(options);\r\n            args.field = field;\r\n            args.fieldType = FieldType.time;\r\n            args.dialogId = dialogId;\r\n            args.dialogArgs = dialogArgs;\r\n            processField(session, results, next, args);\r\n        };\r\n    };\r\n    Fields.endForm = function () {\r\n        return function (session, results, next) {\r\n            var r = saveResults(session, results);\r\n            if (r.resumed == dialog.ResumeReason.completed) {\r\n                var form = session.dialogData[consts.Data.Form];\r\n                delete session.dialogData[consts.Data.Form];\r\n                next({ resumed: dialog.ResumeReason.completed, response: form });\r\n            }\r\n            else {\r\n                next(r);\r\n            }\r\n        };\r\n    };\r\n    Fields.returnForm = function () {\r\n        return function (session, results, next) {\r\n            var r = saveResults(session, results);\r\n            if (r.resumed == dialog.ResumeReason.completed) {\r\n                var form = session.dialogData[consts.Data.Form];\r\n                delete session.dialogData[consts.Data.Form];\r\n                session.endDialogWithResult({ resumed: dialog.ResumeReason.completed, response: form });\r\n            }\r\n            else {\r\n                session.endDialogWithResult(r);\r\n            }\r\n        };\r\n    };\r\n    Fields.onPromptUseDefault = function () {\r\n        return function (context, next) {\r\n            var type = typeof context.form[context.field];\r\n            if (type === 'undefined' || type === 'null') {\r\n                type = typeof context.userData[context.field];\r\n                if (type === 'undefined' || type === 'null') {\r\n                    next(false);\r\n                }\r\n                else {\r\n                    context.form[context.field] = context.userData[context.field];\r\n                    next(true);\r\n                }\r\n            }\r\n            else {\r\n                next(true);\r\n            }\r\n        };\r\n    };\r\n    return Fields;\r\n}());\r\nexports.Fields = Fields;\r\ndl.systemLib.dialog(consts.DialogId.Field, new sd.SimpleDialog(function (session, args) {\r\n    var fieldArgs = session.dialogData;\r\n    function callPrompt() {\r\n        fieldArgs.returnResults = true;\r\n        if (fieldArgs.fieldType == FieldType.dialog) {\r\n            session.beginDialog(fieldArgs.dialogId, fieldArgs.dialogArgs);\r\n        }\r\n        else {\r\n            session.beginDialog(consts.DialogId.Prompts, fieldArgs);\r\n        }\r\n    }\r\n    if (args.hasOwnProperty('resumed')) {\r\n        if (fieldArgs.returnResults || args.resumed !== dialog.ResumeReason.completed) {\r\n            session.endDialog(args);\r\n        }\r\n        else {\r\n            if (fieldArgs.confirmPrompt && !args.response) {\r\n                callPrompt();\r\n            }\r\n            else if (fieldArgs.optionalPrompt && args.response) {\r\n                callPrompt();\r\n            }\r\n            else {\r\n                session.endDialogWithResult({ response: fieldArgs.value, resumed: dialog.ResumeReason.completed });\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (var key in args) {\r\n            if (args.hasOwnProperty(key) && typeof args[key] !== 'function') {\r\n                fieldArgs[key] = args[key];\r\n            }\r\n        }\r\n        if (fieldArgs.confirmPrompt || fieldArgs.optionalPrompt) {\r\n            prompts.Prompts.confirm(session, fieldArgs.confirmPrompt || fieldArgs.optionalPrompt);\r\n        }\r\n        else {\r\n            callPrompt();\r\n        }\r\n    }\r\n}));\r\nfunction processField(session, results, next, args) {\r\n    var r = saveResults(session, results);\r\n    if (r.resumed == dialog.ResumeReason.completed) {\r\n        try {\r\n            var dataType;\r\n            switch (args.fieldType) {\r\n                case FieldType.choice:\r\n                case FieldType.text:\r\n                    dataType = 'text';\r\n                    break;\r\n                case FieldType.confirm:\r\n                    dataType = 'boolean';\r\n                    break;\r\n                case FieldType.number:\r\n                case FieldType.time:\r\n                    dataType = 'number';\r\n                default:\r\n                    dataType = null;\r\n                    break;\r\n            }\r\n            onPrompt(session, args.field, dataType, args, function (skip) {\r\n                args.value = session.dialogData[consts.Data.Form][args.field];\r\n                var valueType = typeof args.value;\r\n                var hasValue = (valueType !== 'null' && valueType !== 'undefined');\r\n                if (args.confirmPrompt) {\r\n                    if (hasValue) {\r\n                        skip = false;\r\n                        args.confirmPrompt = expandTemplate(session, args.field, args.confirmPrompt);\r\n                    }\r\n                    else {\r\n                        delete args.confirmPrompt;\r\n                    }\r\n                }\r\n                if (args.optionalPrompt) {\r\n                    if (!hasValue) {\r\n                        skip = false;\r\n                        args.optionalPrompt = expandTemplate(session, args.field, args.optionalPrompt);\r\n                    }\r\n                    else {\r\n                        delete args.optionalPrompt;\r\n                    }\r\n                }\r\n                if (!skip) {\r\n                    if (args.prompt) {\r\n                        args.prompt = expandTemplate(session, args.field, args.prompt);\r\n                    }\r\n                    if (args.retryPrompt && typeof args.retryPrompt !== 'object') {\r\n                        args.retryPrompt = expandTemplate(session, args.field, args.retryPrompt);\r\n                    }\r\n                    session.dialogData[consts.Data.Field] = { type: args.fieldType, name: args.field };\r\n                    session.beginDialog(consts.DialogId.Field, args);\r\n                }\r\n                else {\r\n                    next();\r\n                }\r\n            });\r\n        }\r\n        catch (e) {\r\n            next({ error: e instanceof Error ? e : new Error(e.toString()), resumed: dialog.ResumeReason.notCompleted });\r\n        }\r\n    }\r\n    else {\r\n        next(r);\r\n    }\r\n}\r\nfunction saveResults(session, results) {\r\n    var r;\r\n    if (results && results.hasOwnProperty('resumed')) {\r\n        if (session.dialogData.hasOwnProperty(consts.Data.Form) && session.dialogData.hasOwnProperty(consts.Data.Field)) {\r\n            var field = session.dialogData[consts.Data.Field];\r\n            delete session.dialogData[consts.Data.Field];\r\n            if (results.resumed == dialog.ResumeReason.completed) {\r\n                var dataType = typeof results.response;\r\n                if (dataType == 'object') {\r\n                    switch (field.type) {\r\n                        case FieldType.choice:\r\n                            session.dialogData[consts.Data.Form][field.name] = results.response.entity;\r\n                            break;\r\n                        case FieldType.time:\r\n                            if (results.response.resolution && results.response.resolution.start) {\r\n                                session.dialogData[consts.Data.Form][field.name] = results.response.resolution.start.getTime();\r\n                            }\r\n                            break;\r\n                        default:\r\n                            session.dialogData[consts.Data.Form][field.name] = results.response;\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    session.dialogData[consts.Data.Form][field.name] = results.response;\r\n                }\r\n            }\r\n            else {\r\n                r = results;\r\n            }\r\n        }\r\n        else if (typeof results.response === 'object') {\r\n            session.dialogData[consts.Data.Form] = results.response;\r\n        }\r\n        if (!r) {\r\n            r = { resumed: dialog.ResumeReason.completed };\r\n        }\r\n    }\r\n    else {\r\n        session.dialogData[consts.Data.Form] = results || {};\r\n        r = { resumed: dialog.ResumeReason.completed };\r\n    }\r\n    return r;\r\n}\r\nfunction onPrompt(session, field, type, options, cb) {\r\n    var form = session.dialogData[consts.Data.Form];\r\n    var context = { userData: session.userData, form: form, field: field };\r\n    if (options.onPrompt) {\r\n        options.onPrompt(context, cb);\r\n    }\r\n    else if (form && form.hasOwnProperty(field)) {\r\n        var dataType = typeof form[field];\r\n        switch (dataType) {\r\n            case 'null':\r\n            case 'undefined':\r\n                cb(false);\r\n                break;\r\n            default:\r\n                cb(type == null || dataType == type);\r\n                break;\r\n        }\r\n    }\r\n    else {\r\n        cb(false);\r\n    }\r\n}\r\nfunction expandTemplate(session, field, prompt) {\r\n    var form = session.dialogData[consts.Data.Form];\r\n    var value = form.hasOwnProperty(field) ? form[field] : '';\r\n    var args = { userData: session.userData, form: form, value: value };\r\n    return session.gettext(mb.Message.randomPrompt(prompt), args);\r\n}\r\n"}